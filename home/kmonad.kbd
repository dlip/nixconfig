(defcfg
  ;; ** For Linux **
  input  (device-file "/dev/input/by-path/platform-i8042-serio-0-event-kbd")
  ;; input  (device-file "/dev/input/by-id/usb-Matias_Ergo_Pro_Keyboard-event-kbd")
  output (uinput-sink "KMonad output")

  ;; ** For Windows **
  ;; input  (low-level-hook)
  ;; output (send-event-sink)

  ;; ** For MacOS **
  ;; input  (iokit-name "my-keyboard-product-string")
  ;; output (kext)

  fallthrough true
)

(defsrc
  esc     f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
  grv     1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab     q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps    a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft      z    x    c    v    b    n    m    ,    .    /    rsft
  lctl    lmet lalt           spc            ralt rmet cmp  rctl
)
 
(defalias nav_e (tap-hold-next-release 200 e (layer-toggle nav)))
(defalias num_s (tap-hold-next-release 200 s (layer-toggle num)))
(defalias sym_t (tap-hold-next-release 200 t (layer-toggle sym)))
(defalias fn_r (tap-hold-next-release 200 r (layer-toggle fn)))

(defalias
  cpy C-c
  pst C-v
  cut C-x
  udo C-z
  all C-a
  fnd C-f
  bk Back
  fw Forward
)

(deflayer colemak-dh
  esc     f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
  grv      1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab      q    w    f    p    b    j    l    u    y    ;    [    ]    \\
  bspc     a    @fn_r    @num_s    @sym_t    g    m    n    @nav_e    i    o    '    ret
  lsft       z    x    c    d    v    k    h    ,    .    /    rsft
  lctl     lmet lalt           spc            lctrl rmet _    _
)

(deflayer nav
  _        _    _    _    _    _    _    _    _    _    _    _    _    
  _        _    _    _    _    _    _    _    _    _    _    _    _    _
  _        esc    home    up    end    pgup    _    _    _    _    _    _    _    _
  _        del    left    down    right    pgdn    _    _    _    _    _    _    _ 
  _          _    _    prnt    caps    _    _    _    _    _    _    _ 
  _        _    _              _              _    _    _    _
)

(deflayer num
  _        _    _    _    _    _    _    _    _    _    _    _    _    
  _        _    _    _    _    _    _    _    _    _    _    _    _    _
  _        _    _    _    _    _    =    7    8    9    \    _    _    _
  _        _    _    _    _    _    -    4    5    6    0    _    _ 
  _          _    _    _    _    _    [    1    2    3    ]    _ 
  _        _    _              _              _    _    _    _
)

(deflayer sym
  _        _    _    _    _    _    _    _    _    _    _    _    _    
  _        _    _    _    _    _    _    _    _    _    _    _    _    _
  _        _    _    _    _    _    +    &    *    \(    |    _    _    _
  _        _    _    _    _    _    \_    $    %    ^    \)    _    _ 
  _          _    _    _    _    _    {    !    @    #    }    _ 
  _        _    _              _              _    _    _    _
)

(deflayer fn
  _        _    _    _    _    _    _    _    _    _    _    _    _    
  _        _    _    _    _    _    _    _    _    _    _    _    _    _
  _        _    _    _    _    _    f13    f7    f8    f9    f10    _    _    _
  _        _    _    _    _    _    f14    f4    f5    f6    f11    _    _ 
  _          _    _    _    _    _    f15    f1    f2    f3    f12    _ 
  _        _    _              _              _    _    _    _
)

(deflayer extend
  _        play rewind previoussong nextsong ejectcd refresh brdn brup www mail prog1 prog2
  _        f1   f2   f3   f4   f5   f6   f7   f8   f9  f10   f11  f12  _
  _        esc  @bk  @fnd @fw  ins  pgup home up   end  menu prnt slck _
  _        lalt lmet lsft lctl ralt pgdn lft  down rght del  caps _
  _          @cut @cpy  tab  @pst @udo pgdn bks  lsft lctl comp _
  _        _    _              ret            _    _    _    _
)


(deflayer empty
  _        _    _    _    _    _    _    _    _    _    _    _    _    
  _        _    _    _    _    _    _    _    _    _    _    _    _    _
  _        _    _    _    _    _    _    _    _    _    _    _    _    _
  _        _    _    _    _    _    _    _    _    _    _    _    _ 
  _          _    _    _    _    _    _    _    _    _    _    _ 
  _        _    _              _              _    _    _    _
)
