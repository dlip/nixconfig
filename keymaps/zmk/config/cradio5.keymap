/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// GENERAL KEYS
#define GEN_NONE &none
#define GEN_TRAN &trans

#define GEN_CTRL &kp LCTRL
#define GEN_ALT &kp LALT
#define GEN_GUI &kp LGUI
#define GEN_FN &mo L_FUN
#define GEN_MED &mo L_MED

// DEFAULT LAYER

#define L_DEF 0

#define DEF_Q &kp Q
#define DEF_W &kp W
#define DEF_F &kp F
#define DEF_P &kp P
#define DEF_B &kp B
                        
#define DEF_A &lt L_FUN A 
#define DEF_R &mt LALT R 
#define DEF_S &mt LGUI S
#define DEF_T &mt LCTRL T 
#define DEF_G &kp G
        
#define DEF_Z &kp Z
#define DEF_X &kp X
#define DEF_C &kp C
#define DEF_D &kp D
#define DEF_V &kp V
                        

#define DEF_J &kp J
#define DEF_L &kp L
#define DEF_U &kp U
#define DEF_Y &kp Y
#define DEF_SEMI &kp SEMI

#define DEF_K &kp K
#define DEF_H &kp H
#define DEF_COMA &kp COMMA
#define DEF_DOT &kp DOT
#define DEF_QUOT &kp SQT

#define DEF_M &kp M
#define DEF_N &mt LCTRL N
#define DEF_E &mt RGUI E
#define DEF_I &mt LALT I 
#define DEF_O &lt L_MED O

#define DEF_SPC  &kp SPC
#define DEF_NAV  &mo L_NAV
#define DEF_NUM  &mo L_NUM
#define DEF_SHFT &sk LSHIFT

// NAVIGATION LAYER
#define L_NAV 1

#define NAV_CAPS &kp CAPS
#define NAV_BSLH &kp BSLH
#define NAV_PIPE &kp PIPE
#define NAV_HOME &kp HOME
#define NAV_UP &kp UP
#define NAV_END &kp END
#define NAV_PGUP &kp PG_UP

#define NAV_ESC &kp ESC
#define NAV_LEFT &kp LEFT
#define NAV_DOWN &kp DOWN
#define NAV_RGHT &kp RIGHT
#define NAV_TAB &kp TAB

#define NAV_GRV &kp GRAVE
#define NAV_TILD &kp TILDE
#define NAV_DEL &kp DEL
#define NAV_BSPC &kp BSPC
#define NAV_RET &kp RET
#define NAV_PGDN &kp PG_DN

// NUM LAYER
#define L_NUM 2

#define NUM_LBKT &kp LBKT
#define NUM_LBRC &kp LBRC
#define NUM_N7 &kp N7 
#define NUM_N8 &kp N8
#define NUM_N9 &kp N9
#define NUM_RBKT &kp RBKT 
#define NUM_RBRC &kp RBRC

#define NUM_EQUL &kp EQUAL
#define NUM_PLUS &kp PLUS
#define NUM_AST  &kp ASTERISK 

#define NUM_N4 &kp N4
#define NUM_N5 &kp N5
#define NUM_N6 &kp N6
#define NUM_N0 &kp N0

#define NUM_MIN &kp MINUS
#define NUM_N1 &kp N1
#define NUM_N2 &kp N2
#define NUM_N3 &kp N3
#define NUM_FSLH &kp FSLH

// MEDIA LAYER
#define L_MED 3

#define MED_BRID &kp C_BRI_DN
#define MED_VOLU &kp C_VOL_UP
#define MED_BRIU &kp C_BRI_UP


#define MED_PRNT &kp PSCRN
#define MED_PREV &kp C_PREV
#define MED_PLAY &kp C_PP
#define MED_NEXT &kp C_NEXT

#define MED_MUTE &kp C_MUTE
#define MED_VOLD &kp C_VOL_DN
#define MED_STOP &kp C_STOP

#define MED_UNDO &kp LC(Z)
#define MED_CUT  &kp LC(X)
#define MED_COPY &kp LC(C)
#define NUM_PST  &kp LC(V)
#define NUM_STAB &kp LS(TAB)

//FUNCTION LAYER
#define L_FUN 4

#define FUN_F7 &kp F7
#define FUN_F8 &kp F8
#define FUN_F9 &kp F9
#define FUN_F10 &kp F10

#define FUN_GAME &to L_GAM
#define FUN_F4 &kp F4
#define FUN_F5 &kp F5
#define FUN_F6 &kp F6
#define FUN_F11 &kp F11

#define FUN_BOOT &bootloader
#define FUN_F1 &kp F1
#define FUN_F2 &kp F2
#define FUN_F3 &kp F3
#define FUN_F13 &kp F12

#define FUN_SPC &kp LC(SPC)

// GAMING LAYER
#define L_GAM 5

#define GAM_TAB &kp TAB
#define GAM_Q &kp Q
#define GAM_W &kp W
#define GAM_E &kp E
#define GAM_R &kp R

#define GAM_LSFT &kp LSHIFT
#define GAM_A &kp A
#define GAM_S &kp S
#define GAM_D &kp D
#define GAM_F &kp F

#define GAM_LCTL &kp LCTRL
#define GAM_Z &kp Z
#define GAM_X &kp X
#define GAM_C &kp C
#define GAM_V &kp V


#define GAM_UP &kp UP

#define GAM_DEF &to L_DEF
#define GAM_LEFT &kp LEFT
#define GAM_DOWN &kp DOWN
#define GAM_RGHT &kp RIGHT

#define GAM_ESC &kp ESC
#define GAM_SPC &kp SPACE

// SYSTEM LAYER
#define L_SYS 6

#define SYS_BOOT &bootloader
#define SYS_BTCL &bt BT_CLR
#define SYS_BTNX &bt BT_NXT
#define SYS_BTPR &bt BT_PRV
#define SYS_BLE &out OUT_BLE
#define SYS_USB &out OUT_USB
#define SYS_OTG &out OUT_TOG
#define SYS_BT0 &bt BT_SEL 0
#define SYS_BT1 &bt BT_SEL 1
#define SYS_BT2 &bt BT_SEL 2
#define SYS_BT3 &bt BT_SEL 3
#define SYS_BT4 &bt BT_SEL 4

// POSITIONS
#define P_Q 0
#define P_W 1
#define P_F 2
#define P_P 3
#define P_B 4
#define P_J 5
#define P_L 6
#define P_U 7
#define P_Y 8
#define P_SEMI 9
#define P_A 10
#define P_R 11
#define P_S 12
#define P_T 13
#define P_G 14
#define P_M 15
#define P_N 16
#define P_E 17
#define P_I 18
#define P_O 19
#define P_Z 20
#define P_X 21
#define P_C 22
#define P_D 23
#define P_V 24
#define P_K 25
#define P_H 26
#define P_COMMA 27
#define P_DOT 28
#define P_SQT 29
#define P_COMBO 31 32

#define P_LALT 30
#define P_SPC 31
#define P_SHFT 32
#define P_RALT 33

#define COMBO_TIMEOUT 100
#define MACRO_TAP 10
#define MACRO_WAIT 0

&mt {
  flavor = "tap-preferred";
  tapping_term_ms = <200>;
};

&lt {
  flavor = "tap-preferred";
  tapping_term_ms = <200>;
};
&sl {
    release-after-ms = <1000>;
};
&sk {
    release-after-ms = <1000>;
    quick-release;
};
/ {
  macros {
    ZMK_MACRO(dot,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp BSPC &kp DOT &kp SPACE>;
    )
    ZMK_MACRO(comma,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp BSPC &kp COMMA &kp SPACE>;
    )
    ZMK_MACRO(ing,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp BSPC &kp I &kp N &kp G &kp SPACE>;
    )
    // MACROS START
    ZMK_MACRO(spm_the,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_the,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_and,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_and,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_you,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Y &kp O &kp U &kp SPACE>;
    )
    ZMK_MACRO(shm_you,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp Y &kp O &kp U &kp SPACE>;
    )
    ZMK_MACRO(spm_that,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp A &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_that,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp A &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_was,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp S &kp SPACE>;
    )
    ZMK_MACRO(shm_was,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp A &kp S &kp SPACE>;
    )
    ZMK_MACRO(spm_for,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_for,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp O &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_are,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_are,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_with,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp I &kp T &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_with,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp I &kp T &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_his,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp I &kp S &kp SPACE>;
    )
    ZMK_MACRO(shm_his,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp I &kp S &kp SPACE>;
    )
    ZMK_MACRO(spm_they,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_they,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp E &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_one,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp N &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_one,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp O &kp N &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_have,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_have,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp A &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_this,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp I &kp S &kp SPACE>;
    )
    ZMK_MACRO(shm_this,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp I &kp S &kp SPACE>;
    )
    ZMK_MACRO(spm_from,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp R &kp O &kp M &kp SPACE>;
    )
    ZMK_MACRO(shm_from,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp R &kp O &kp M &kp SPACE>;
    )
    ZMK_MACRO(spm_had,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_had,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp A &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_hot,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_hot,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp O &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_but,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_but,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_some,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp O &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_some,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp O &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_what,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp A &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_what,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp H &kp A &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_there,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_there,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp E &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_can,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_can,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_out,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_out,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp O &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_other,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp T &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_other,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp O &kp T &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_were,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp E &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_were,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp E &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_all,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_all,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_your,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Y &kp O &kp U &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_your,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp Y &kp O &kp U &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_when,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_when,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp H &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_use,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp U &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_use,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp U &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_word,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp R &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_word,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp O &kp R &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_how,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(shm_how,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(spm_said,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp A &kp I &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_said,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp A &kp I &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_each,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_each,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp E &kp A &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_she,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp H &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_she,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp H &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_which,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp I &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_which,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp H &kp I &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_their,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp I &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_their,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp E &kp I &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_time,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp I &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_time,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp I &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_will,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp I &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_will,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp I &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_way,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_way,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_about,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp B &kp O &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_about,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp B &kp O &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_many,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp N &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_many,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp A &kp N &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_then,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_then,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_them,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp M &kp SPACE>;
    )
    ZMK_MACRO(shm_them,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp E &kp M &kp SPACE>;
    )
    ZMK_MACRO(spm_would,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp U &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_would,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp O &kp U &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_write,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp R &kp I &kp T &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_write,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp R &kp I &kp T &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_like,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp K &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_like,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp I &kp K &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_these,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_these,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp E &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_her,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_her,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_long,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp O &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(shm_long,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp O &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(spm_make,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp K &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_make,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp A &kp K &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_thing,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp I &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(shm_thing,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp I &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(spm_see,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_see,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp E &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_him,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp I &kp M &kp SPACE>;
    )
    ZMK_MACRO(shm_him,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp I &kp M &kp SPACE>;
    )
    ZMK_MACRO(spm_two,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp W &kp O &kp SPACE>;
    )
    ZMK_MACRO(shm_two,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp W &kp O &kp SPACE>;
    )
    ZMK_MACRO(spm_has,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp S &kp SPACE>;
    )
    ZMK_MACRO(shm_has,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp A &kp S &kp SPACE>;
    )
    ZMK_MACRO(spm_look,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp O &kp O &kp K &kp SPACE>;
    )
    ZMK_MACRO(shm_look,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp O &kp O &kp K &kp SPACE>;
    )
    ZMK_MACRO(spm_more,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_more,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp O &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_day,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_day,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp D &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_could,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp U &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_could,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp O &kp U &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_come,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_come,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp O &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_did,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp I &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_did,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp D &kp I &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_sound,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp O &kp U &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_sound,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp O &kp U &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_most,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_most,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp O &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_number,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp U &kp M &kp B &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_number,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp N &kp U &kp M &kp B &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_who,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp O &kp SPACE>;
    )
    ZMK_MACRO(shm_who,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp H &kp O &kp SPACE>;
    )
    ZMK_MACRO(spm_over,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_over,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp O &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_know,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp N &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(shm_know,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp K &kp N &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(spm_water,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp T &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_water,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp A &kp T &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_than,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_than,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_call,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_call,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp A &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_first,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp I &kp R &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_first,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp I &kp R &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_people,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp E &kp O &kp P &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_people,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp E &kp O &kp P &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_may,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_may,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_down,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp W &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_down,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp D &kp O &kp W &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_side,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp I &kp D &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_side,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp I &kp D &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_been,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_been,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp E &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_now,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(shm_now,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp N &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(spm_find,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp I &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_find,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp I &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_any,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp N &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_any,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp N &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_new,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp W &kp SPACE>;
    )
    ZMK_MACRO(shm_new,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp N &kp E &kp W &kp SPACE>;
    )
    ZMK_MACRO(spm_work,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp R &kp K &kp SPACE>;
    )
    ZMK_MACRO(shm_work,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp O &kp R &kp K &kp SPACE>;
    )
    ZMK_MACRO(spm_part,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp A &kp R &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_part,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp A &kp R &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_take,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp A &kp K &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_take,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp A &kp K &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_get,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp E &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_get,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp G &kp E &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_place,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp L &kp A &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_place,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp L &kp A &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_made,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp D &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_made,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp A &kp D &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_live,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_live,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp I &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_where,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp E &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_where,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp H &kp E &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_after,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp F &kp T &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_after,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp F &kp T &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_back,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp A &kp C &kp K &kp SPACE>;
    )
    ZMK_MACRO(shm_back,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp A &kp C &kp K &kp SPACE>;
    )
    ZMK_MACRO(spm_little,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp T &kp T &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_little,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp I &kp T &kp T &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_only,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp N &kp L &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_only,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp O &kp N &kp L &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_round,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp O &kp U &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_round,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp R &kp O &kp U &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_man,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_man,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_year,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Y &kp E &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_year,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp Y &kp E &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_came,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_came,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp A &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_show,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp H &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(shm_show,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp H &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(spm_every,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp V &kp E &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_every,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp E &kp V &kp E &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_good,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp O &kp O &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_good,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp G &kp O &kp O &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_give,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp I &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_give,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp G &kp I &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_our,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp U &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_our,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp O &kp U &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_under,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp U &kp N &kp D &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_under,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp U &kp N &kp D &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_name,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp A &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_name,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp N &kp A &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_very,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp V &kp E &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_very,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp V &kp E &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_through,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp R &kp O &kp U &kp G &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_through,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp R &kp O &kp U &kp G &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_just,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp J &kp U &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_just,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp J &kp U &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_form,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp R &kp M &kp SPACE>;
    )
    ZMK_MACRO(shm_form,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp O &kp R &kp M &kp SPACE>;
    )
    ZMK_MACRO(spm_much,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp U &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_much,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp U &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_great,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp R &kp E &kp A &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_great,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp G &kp R &kp E &kp A &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_think,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp I &kp N &kp K &kp SPACE>;
    )
    ZMK_MACRO(shm_think,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp I &kp N &kp K &kp SPACE>;
    )
    ZMK_MACRO(spm_say,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_say,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_help,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp L &kp P &kp SPACE>;
    )
    ZMK_MACRO(shm_help,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp E &kp L &kp P &kp SPACE>;
    )
    ZMK_MACRO(spm_low,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(shm_low,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(spm_line,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp N &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_line,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp I &kp N &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_before,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp F &kp O &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_before,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp E &kp F &kp O &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_turn,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp U &kp R &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_turn,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp U &kp R &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_cause,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp U &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_cause,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp A &kp U &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_same,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp A &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_same,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp A &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_mean,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp E &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_mean,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp E &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_differ,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp I &kp F &kp F &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_differ,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp D &kp I &kp F &kp F &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_move,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_move,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp O &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_right,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp I &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_right,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp R &kp I &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_boy,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_boy,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp O &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_old,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_old,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp O &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_too,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp O &kp O &kp SPACE>;
    )
    ZMK_MACRO(shm_too,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp O &kp O &kp SPACE>;
    )
    ZMK_MACRO(spm_does,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp E &kp S &kp SPACE>;
    )
    ZMK_MACRO(shm_does,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp D &kp O &kp E &kp S &kp SPACE>;
    )
    ZMK_MACRO(spm_tell,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp E &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_tell,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp E &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_sentence,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp N &kp T &kp E &kp N &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_sentence,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp E &kp N &kp T &kp E &kp N &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_set,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_set,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp E &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_three,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp R &kp E &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_three,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp R &kp E &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_want,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp N &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_want,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp A &kp N &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_air,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp I &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_air,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp I &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_well,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp E &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_well,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp E &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_also,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp L &kp S &kp O &kp SPACE>;
    )
    ZMK_MACRO(shm_also,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp L &kp S &kp O &kp SPACE>;
    )
    ZMK_MACRO(spm_play,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp L &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_play,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp L &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_small,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp M &kp A &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_small,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp M &kp A &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_end,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_end,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp E &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_put,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_put,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_home,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_home,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp O &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_read,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp E &kp A &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_read,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp R &kp E &kp A &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_hand,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_hand,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp A &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_port,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp O &kp R &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_port,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp O &kp R &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_large,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp R &kp G &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_large,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp A &kp R &kp G &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_spell,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp P &kp E &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_spell,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp P &kp E &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_add,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp D &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_add,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp D &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_even,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp V &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_even,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp E &kp V &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_land,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_land,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp A &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_here,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_here,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp E &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_must,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp U &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_must,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp U &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_big,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp I &kp G &kp SPACE>;
    )
    ZMK_MACRO(shm_big,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp I &kp G &kp SPACE>;
    )
    ZMK_MACRO(spm_high,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp I &kp G &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_high,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp I &kp G &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_such,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp U &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_such,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp U &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_follow,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp L &kp L &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(shm_follow,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp O &kp L &kp L &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(spm_act,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp C &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_act,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp C &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_why,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_why,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp H &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_ask,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp S &kp K &kp SPACE>;
    )
    ZMK_MACRO(shm_ask,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp S &kp K &kp SPACE>;
    )
    ZMK_MACRO(spm_men,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_men,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_change,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp H &kp A &kp N &kp G &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_change,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp H &kp A &kp N &kp G &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_went,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp E &kp N &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_went,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp E &kp N &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_light,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_light,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp I &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_kind,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp I &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_kind,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp K &kp I &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_off,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp F &kp F &kp SPACE>;
    )
    ZMK_MACRO(shm_off,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp O &kp F &kp F &kp SPACE>;
    )
    ZMK_MACRO(spm_need,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp E &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_need,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp N &kp E &kp E &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_house,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp U &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_house,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp O &kp U &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_picture,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp I &kp C &kp T &kp U &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_picture,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp I &kp C &kp T &kp U &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_try,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_try,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_again,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp G &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_again,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp G &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_animal,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp N &kp I &kp M &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_animal,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp N &kp I &kp M &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_point,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp O &kp I &kp N &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_point,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp O &kp I &kp N &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_mother,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp T &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_mother,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp O &kp T &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_world,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp R &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_world,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp O &kp R &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_near,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_near,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp N &kp E &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_build,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp U &kp I &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_build,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp U &kp I &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_self,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp L &kp F &kp SPACE>;
    )
    ZMK_MACRO(shm_self,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp E &kp L &kp F &kp SPACE>;
    )
    ZMK_MACRO(spm_earth,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp R &kp T &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_earth,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp E &kp A &kp R &kp T &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_father,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp A &kp T &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_father,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp A &kp T &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_head,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp A &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_head,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp E &kp A &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_stand,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp A &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_stand,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp T &kp A &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_own,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp W &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_own,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp O &kp W &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_page,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp A &kp G &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_page,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp A &kp G &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_should,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp H &kp O &kp U &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_should,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp H &kp O &kp U &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_country,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp U &kp N &kp T &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_country,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp O &kp U &kp N &kp T &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_found,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp U &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_found,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp O &kp U &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_answer,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp N &kp S &kp W &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_answer,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp N &kp S &kp W &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_school,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp C &kp H &kp O &kp O &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_school,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp C &kp H &kp O &kp O &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_grow,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp R &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(shm_grow,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp G &kp R &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(spm_study,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp U &kp D &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_study,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp T &kp U &kp D &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_still,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp I &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_still,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp T &kp I &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_learn,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp A &kp R &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_learn,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp E &kp A &kp R &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_plant,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp L &kp A &kp N &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_plant,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp L &kp A &kp N &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_cover,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_cover,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp O &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_food,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp O &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_food,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp O &kp O &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_sun,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp U &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_sun,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp U &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_four,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp U &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_four,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp O &kp U &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_thought,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp O &kp U &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_thought,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp O &kp U &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_let,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_let,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp E &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_keep,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp E &kp E &kp P &kp SPACE>;
    )
    ZMK_MACRO(shm_keep,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp K &kp E &kp E &kp P &kp SPACE>;
    )
    ZMK_MACRO(spm_eye,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp Y &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_eye,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp E &kp Y &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_never,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_never,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp N &kp E &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_last,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_last,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp A &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_door,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp O &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_door,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp D &kp O &kp O &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_between,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp T &kp W &kp E &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_between,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp E &kp T &kp W &kp E &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_city,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp I &kp T &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_city,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp I &kp T &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_tree,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp R &kp E &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_tree,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp R &kp E &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_cross,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp R &kp O &kp S &kp S &kp SPACE>;
    )
    ZMK_MACRO(shm_cross,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp R &kp O &kp S &kp S &kp SPACE>;
    )
    ZMK_MACRO(spm_since,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp I &kp N &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_since,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp I &kp N &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_hard,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp R &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_hard,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp A &kp R &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_start,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp A &kp R &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_start,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp T &kp A &kp R &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_might,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp I &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_might,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp I &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_story,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp O &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_story,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp T &kp O &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_saw,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp A &kp W &kp SPACE>;
    )
    ZMK_MACRO(shm_saw,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp A &kp W &kp SPACE>;
    )
    ZMK_MACRO(spm_far,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_far,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_sea,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp A &kp SPACE>;
    )
    ZMK_MACRO(shm_sea,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp E &kp A &kp SPACE>;
    )
    ZMK_MACRO(spm_draw,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp R &kp A &kp W &kp SPACE>;
    )
    ZMK_MACRO(shm_draw,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp D &kp R &kp A &kp W &kp SPACE>;
    )
    ZMK_MACRO(spm_left,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp F &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_left,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp E &kp F &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_late,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp T &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_late,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp A &kp T &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_run,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp U &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_run,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp R &kp U &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_donSQTt,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp N &kp SQT &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_donSQTt,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp D &kp O &kp N &kp SQT &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_while,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp I &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_while,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp H &kp I &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_press,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp R &kp E &kp S &kp S &kp SPACE>;
    )
    ZMK_MACRO(shm_press,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp R &kp E &kp S &kp S &kp SPACE>;
    )
    ZMK_MACRO(spm_close,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp L &kp O &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_close,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp L &kp O &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_night,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp I &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_night,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp N &kp I &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_real,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp E &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_real,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp R &kp E &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_life,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp F &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_life,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp I &kp F &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_few,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp E &kp W &kp SPACE>;
    )
    ZMK_MACRO(shm_few,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp E &kp W &kp SPACE>;
    )
    ZMK_MACRO(spm_stop,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp O &kp P &kp SPACE>;
    )
    ZMK_MACRO(shm_stop,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp T &kp O &kp P &kp SPACE>;
    )
    ZMK_MACRO(spm_open,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp P &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_open,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp O &kp P &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_seem,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp E &kp M &kp SPACE>;
    )
    ZMK_MACRO(shm_seem,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp E &kp E &kp M &kp SPACE>;
    )
    ZMK_MACRO(spm_together,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp O &kp G &kp E &kp T &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_together,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp O &kp G &kp E &kp T &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_next,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp X &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_next,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp N &kp E &kp X &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_white,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp I &kp T &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_white,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp H &kp I &kp T &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_children,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp H &kp I &kp L &kp D &kp R &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_children,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp H &kp I &kp L &kp D &kp R &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_begin,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp G &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_begin,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp E &kp G &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_got,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp O &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_got,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp G &kp O &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_walk,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp L &kp K &kp SPACE>;
    )
    ZMK_MACRO(shm_walk,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp A &kp L &kp K &kp SPACE>;
    )
    ZMK_MACRO(spm_example,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp X &kp A &kp M &kp P &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_example,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp E &kp X &kp A &kp M &kp P &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_ease,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_ease,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp E &kp A &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_paper,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp A &kp P &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_paper,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp A &kp P &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_often,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp F &kp T &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_often,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp O &kp F &kp T &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_always,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp L &kp W &kp A &kp Y &kp S &kp SPACE>;
    )
    ZMK_MACRO(shm_always,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp L &kp W &kp A &kp Y &kp S &kp SPACE>;
    )
    ZMK_MACRO(spm_music,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp U &kp S &kp I &kp C &kp SPACE>;
    )
    ZMK_MACRO(shm_music,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp U &kp S &kp I &kp C &kp SPACE>;
    )
    ZMK_MACRO(spm_those,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp O &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_those,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp O &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_both,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp T &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_both,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp O &kp T &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_mark,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp R &kp K &kp SPACE>;
    )
    ZMK_MACRO(shm_mark,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp A &kp R &kp K &kp SPACE>;
    )
    ZMK_MACRO(spm_book,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp O &kp K &kp SPACE>;
    )
    ZMK_MACRO(shm_book,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp O &kp O &kp K &kp SPACE>;
    )
    ZMK_MACRO(spm_letter,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp T &kp T &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_letter,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp E &kp T &kp T &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_until,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp U &kp N &kp T &kp I &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_until,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp U &kp N &kp T &kp I &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_mile,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp I &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_mile,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp I &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_river,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp I &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_river,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp R &kp I &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_car,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_car,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_feet,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp E &kp E &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_feet,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp E &kp E &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_care,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_care,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp A &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_second,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp C &kp O &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_second,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp E &kp C &kp O &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_group,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp R &kp O &kp U &kp P &kp SPACE>;
    )
    ZMK_MACRO(shm_group,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp G &kp R &kp O &kp U &kp P &kp SPACE>;
    )
    ZMK_MACRO(spm_carry,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp R &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_carry,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp A &kp R &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_took,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp O &kp O &kp K &kp SPACE>;
    )
    ZMK_MACRO(shm_took,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp O &kp O &kp K &kp SPACE>;
    )
    ZMK_MACRO(spm_rain,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_rain,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp R &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_eat,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_eat,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp E &kp A &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_room,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp O &kp O &kp M &kp SPACE>;
    )
    ZMK_MACRO(shm_room,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp R &kp O &kp O &kp M &kp SPACE>;
    )
    ZMK_MACRO(spm_friend,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp R &kp I &kp E &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_friend,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp R &kp I &kp E &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_began,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp G &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_began,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp E &kp G &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_idea,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp I &kp D &kp E &kp A &kp SPACE>;
    )
    ZMK_MACRO(shm_idea,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp I &kp D &kp E &kp A &kp SPACE>;
    )
    ZMK_MACRO(spm_fish,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp I &kp S &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_fish,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp I &kp S &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_mountain,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp U &kp N &kp T &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_mountain,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp O &kp U &kp N &kp T &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_north,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp O &kp R &kp T &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_north,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp N &kp O &kp R &kp T &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_once,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp N &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_once,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp O &kp N &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_base,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp A &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_base,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp A &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_hear,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_hear,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp E &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_horse,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp R &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_horse,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp O &kp R &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_cut,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_cut,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_sure,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp U &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_sure,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp U &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_watch,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp T &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_watch,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp A &kp T &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_color,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp L &kp O &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_color,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp C &kp O &kp L &kp O &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_face,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp A &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_face,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp A &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_wood,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp O &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_wood,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp O &kp O &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_main,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_main,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_enough,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp N &kp O &kp U &kp G &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_enough,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp E &kp N &kp O &kp U &kp G &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_plain,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp L &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_plain,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp L &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_girl,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp I &kp R &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_girl,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp G &kp I &kp R &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_usual,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp U &kp S &kp U &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_usual,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp U &kp S &kp U &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_young,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Y &kp O &kp U &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(shm_young,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp Y &kp O &kp U &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(spm_ready,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp E &kp A &kp D &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_ready,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp R &kp E &kp A &kp D &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_above,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp B &kp O &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_above,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp A &kp B &kp O &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_ever,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(shm_ever,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp E &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(spm_red,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp E &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_red,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp R &kp E &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_list,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_list,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp I &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_though,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp O &kp U &kp G &kp H &kp SPACE>;
    )
    ZMK_MACRO(shm_though,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp H &kp O &kp U &kp G &kp H &kp SPACE>;
    )
    ZMK_MACRO(spm_feel,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp E &kp E &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_feel,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp E &kp E &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_talk,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp A &kp L &kp K &kp SPACE>;
    )
    ZMK_MACRO(shm_talk,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp A &kp L &kp K &kp SPACE>;
    )
    ZMK_MACRO(spm_bird,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp I &kp R &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_bird,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp I &kp R &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_body,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp D &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_body,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp O &kp D &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_dog,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp G &kp SPACE>;
    )
    ZMK_MACRO(shm_dog,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp D &kp O &kp G &kp SPACE>;
    )
    ZMK_MACRO(spm_family,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp A &kp M &kp I &kp L &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_family,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp A &kp M &kp I &kp L &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_direct,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp I &kp R &kp E &kp C &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_direct,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp D &kp I &kp R &kp E &kp C &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_pose,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp O &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_pose,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp O &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_leave,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp A &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_leave,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp E &kp A &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_song,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp O &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(shm_song,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp O &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(spm_measure,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp E &kp A &kp S &kp U &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_measure,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp E &kp A &kp S &kp U &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_product,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp R &kp O &kp D &kp U &kp C &kp T &kp SPACE>;
    )
    ZMK_MACRO(shm_product,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp P &kp R &kp O &kp D &kp U &kp C &kp T &kp SPACE>;
    )
    ZMK_MACRO(spm_black,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp L &kp A &kp C &kp K &kp SPACE>;
    )
    ZMK_MACRO(shm_black,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp L &kp A &kp C &kp K &kp SPACE>;
    )
    ZMK_MACRO(spm_numeral,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp U &kp M &kp E &kp R &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_numeral,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp N &kp U &kp M &kp E &kp R &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_wind,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp I &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(shm_wind,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp W &kp I &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(spm_question,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Q &kp U &kp E &kp S &kp T &kp I &kp O &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_question,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp Q &kp U &kp E &kp S &kp T &kp I &kp O &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_happen,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp P &kp P &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(shm_happen,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp H &kp A &kp P &kp P &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(spm_ship,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp H &kp I &kp P &kp SPACE>;
    )
    ZMK_MACRO(shm_ship,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp H &kp I &kp P &kp SPACE>;
    )
    ZMK_MACRO(spm_rock,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp O &kp C &kp K &kp SPACE>;
    )
    ZMK_MACRO(shm_rock,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp R &kp O &kp C &kp K &kp SPACE>;
    )
    ZMK_MACRO(spm_knew,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp N &kp E &kp W &kp SPACE>;
    )
    ZMK_MACRO(shm_knew,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp K &kp N &kp E &kp W &kp SPACE>;
    )
    ZMK_MACRO(spm_king,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp I &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(shm_king,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp K &kp I &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(spm_size,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp I &kp Z &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_size,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp I &kp Z &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_early,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp R &kp L &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_early,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp E &kp A &kp R &kp L &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_five,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp I &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(shm_five,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp I &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(spm_six,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp I &kp X &kp SPACE>;
    )
    ZMK_MACRO(shm_six,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp I &kp X &kp SPACE>;
    )
    ZMK_MACRO(spm_travel,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp R &kp A &kp V &kp E &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_travel,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp T &kp R &kp A &kp V &kp E &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_several,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp V &kp E &kp R &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(shm_several,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp S &kp E &kp V &kp E &kp R &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(spm_lay,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_lay,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp L &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_money,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp N &kp E &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_money,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp M &kp O &kp N &kp E &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_fly,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp L &kp Y &kp SPACE>;
    )
    ZMK_MACRO(shm_fly,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp F &kp L &kp Y &kp SPACE>;
    )
    ZMK_MACRO(spm_box,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp X &kp SPACE>;
    )
    ZMK_MACRO(shm_box,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&sk LSHIFT &kp B &kp O &kp X &kp SPACE>;
    )

    // MACROS END
  };
  combos {
    compatible = "zmk,combos";
    combo_system {
      timeout-ms = <100>;
      key-positions = <0 20>;
      bindings = <&tog L_SYS>;
    };
    combo_comma {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_COMBO P_COMMA>;
      bindings = <&comma>;
    };
    combo_dot {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_COMBO P_DOT>;
      bindings = <&dot>;
    };
    combo_ing {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_COMBO P_G>;
      bindings = <&ing>;
    };
    // COMBOS START
    combo_spm_the {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_T P_SPC>;
      bindings = <&spm_the>;
    };
    combo_shm_the {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_T P_SHFT>;
      bindings = <&shm_the>;
    };
    combo_spm_and {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_D P_SPC>;
      bindings = <&spm_and>;
    };
    combo_shm_and {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_D P_SHFT>;
      bindings = <&shm_and>;
    };
    combo_spm_you {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_Y P_SPC>;
      bindings = <&spm_you>;
    };
    combo_shm_you {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_Y P_SHFT>;
      bindings = <&shm_you>;
    };
    combo_spm_that {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_T P_SPC>;
      bindings = <&spm_that>;
    };
    combo_shm_that {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_T P_SHFT>;
      bindings = <&shm_that>;
    };
    combo_spm_was {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_W P_SPC>;
      bindings = <&spm_was>;
    };
    combo_shm_was {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_W P_SHFT>;
      bindings = <&shm_was>;
    };
    combo_spm_for {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_R P_SPC>;
      bindings = <&spm_for>;
    };
    combo_shm_for {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_R P_SHFT>;
      bindings = <&shm_for>;
    };
    combo_spm_are {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_E P_SPC>;
      bindings = <&spm_are>;
    };
    combo_shm_are {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_E P_SHFT>;
      bindings = <&shm_are>;
    };
    combo_spm_with {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_W P_SPC>;
      bindings = <&spm_with>;
    };
    combo_shm_with {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_W P_SHFT>;
      bindings = <&shm_with>;
    };
    combo_spm_his {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_S P_SPC>;
      bindings = <&spm_his>;
    };
    combo_shm_his {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_S P_SHFT>;
      bindings = <&shm_his>;
    };
    combo_spm_they {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_Y P_SPC>;
      bindings = <&spm_they>;
    };
    combo_shm_they {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_Y P_SHFT>;
      bindings = <&shm_they>;
    };
    combo_spm_one {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_O P_SPC>;
      bindings = <&spm_one>;
    };
    combo_shm_one {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_O P_SHFT>;
      bindings = <&shm_one>;
    };
    combo_spm_have {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_H P_SPC>;
      bindings = <&spm_have>;
    };
    combo_shm_have {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_H P_SHFT>;
      bindings = <&shm_have>;
    };
    combo_spm_this {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_T P_SPC>;
      bindings = <&spm_this>;
    };
    combo_shm_this {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_T P_SHFT>;
      bindings = <&shm_this>;
    };
    combo_spm_from {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_M P_SPC>;
      bindings = <&spm_from>;
    };
    combo_shm_from {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_M P_SHFT>;
      bindings = <&shm_from>;
    };
    combo_spm_had {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_H P_SPC>;
      bindings = <&spm_had>;
    };
    combo_shm_had {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_H P_SHFT>;
      bindings = <&shm_had>;
    };
    combo_spm_hot {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_T P_SPC>;
      bindings = <&spm_hot>;
    };
    combo_shm_hot {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_T P_SHFT>;
      bindings = <&shm_hot>;
    };
    combo_spm_but {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_U P_SPC>;
      bindings = <&spm_but>;
    };
    combo_shm_but {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_U P_SHFT>;
      bindings = <&shm_but>;
    };
    combo_spm_some {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_S P_SPC>;
      bindings = <&spm_some>;
    };
    combo_shm_some {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_S P_SHFT>;
      bindings = <&shm_some>;
    };
    combo_spm_what {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_W P_SPC>;
      bindings = <&spm_what>;
    };
    combo_shm_what {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_W P_SHFT>;
      bindings = <&shm_what>;
    };
    combo_spm_there {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_T P_SPC>;
      bindings = <&spm_there>;
    };
    combo_shm_there {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_T P_SHFT>;
      bindings = <&shm_there>;
    };
    combo_spm_can {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_N P_SPC>;
      bindings = <&spm_can>;
    };
    combo_shm_can {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_N P_SHFT>;
      bindings = <&shm_can>;
    };
    combo_spm_out {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_T P_SPC>;
      bindings = <&spm_out>;
    };
    combo_shm_out {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_T P_SHFT>;
      bindings = <&shm_out>;
    };
    combo_spm_other {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_R P_SPC>;
      bindings = <&spm_other>;
    };
    combo_shm_other {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_R P_SHFT>;
      bindings = <&shm_other>;
    };
    combo_spm_were {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_W P_SPC>;
      bindings = <&spm_were>;
    };
    combo_shm_were {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_W P_SHFT>;
      bindings = <&shm_were>;
    };
    combo_spm_all {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_L P_SPC>;
      bindings = <&spm_all>;
    };
    combo_shm_all {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_L P_SHFT>;
      bindings = <&shm_all>;
    };
    combo_spm_your {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_Y P_SPC>;
      bindings = <&spm_your>;
    };
    combo_shm_your {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_Y P_SHFT>;
      bindings = <&shm_your>;
    };
    combo_spm_when {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_W P_SPC>;
      bindings = <&spm_when>;
    };
    combo_shm_when {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_W P_SHFT>;
      bindings = <&shm_when>;
    };
    combo_spm_use {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_U P_SPC>;
      bindings = <&spm_use>;
    };
    combo_shm_use {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_U P_SHFT>;
      bindings = <&shm_use>;
    };
    combo_spm_word {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_W P_SPC>;
      bindings = <&spm_word>;
    };
    combo_shm_word {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_W P_SHFT>;
      bindings = <&shm_word>;
    };
    combo_spm_how {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_O P_SPC>;
      bindings = <&spm_how>;
    };
    combo_shm_how {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_O P_SHFT>;
      bindings = <&shm_how>;
    };
    combo_spm_said {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_S P_SPC>;
      bindings = <&spm_said>;
    };
    combo_shm_said {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_S P_SHFT>;
      bindings = <&shm_said>;
    };
    combo_spm_each {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_E P_SPC>;
      bindings = <&spm_each>;
    };
    combo_shm_each {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_E P_SHFT>;
      bindings = <&shm_each>;
    };
    combo_spm_she {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_S P_SPC>;
      bindings = <&spm_she>;
    };
    combo_shm_she {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_S P_SHFT>;
      bindings = <&shm_she>;
    };
    combo_spm_which {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_W P_SPC>;
      bindings = <&spm_which>;
    };
    combo_shm_which {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_W P_SHFT>;
      bindings = <&shm_which>;
    };
    combo_spm_their {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_T P_SPC>;
      bindings = <&spm_their>;
    };
    combo_shm_their {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_T P_SHFT>;
      bindings = <&shm_their>;
    };
    combo_spm_time {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_T P_SPC>;
      bindings = <&spm_time>;
    };
    combo_shm_time {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_T P_SHFT>;
      bindings = <&shm_time>;
    };
    combo_spm_will {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_W P_SPC>;
      bindings = <&spm_will>;
    };
    combo_shm_will {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_W P_SHFT>;
      bindings = <&shm_will>;
    };
    combo_spm_way {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_W P_Y P_SPC>;
      bindings = <&spm_way>;
    };
    combo_shm_way {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_W P_Y P_SHFT>;
      bindings = <&shm_way>;
    };
    combo_spm_about {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_U P_SPC>;
      bindings = <&spm_about>;
    };
    combo_shm_about {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_U P_SHFT>;
      bindings = <&shm_about>;
    };
    combo_spm_many {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_Y P_SPC>;
      bindings = <&spm_many>;
    };
    combo_shm_many {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_Y P_SHFT>;
      bindings = <&shm_many>;
    };
    combo_spm_then {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_T P_SPC>;
      bindings = <&spm_then>;
    };
    combo_shm_then {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_T P_SHFT>;
      bindings = <&shm_then>;
    };
    combo_spm_them {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_M P_SPC>;
      bindings = <&spm_them>;
    };
    combo_shm_them {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_M P_SHFT>;
      bindings = <&shm_them>;
    };
    combo_spm_would {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_W P_SPC>;
      bindings = <&spm_would>;
    };
    combo_shm_would {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_W P_SHFT>;
      bindings = <&shm_would>;
    };
    combo_spm_write {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_W P_SPC>;
      bindings = <&spm_write>;
    };
    combo_shm_write {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_W P_SHFT>;
      bindings = <&shm_write>;
    };
    combo_spm_like {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_L P_SPC>;
      bindings = <&spm_like>;
    };
    combo_shm_like {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_L P_SHFT>;
      bindings = <&shm_like>;
    };
    combo_spm_these {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_T P_SPC>;
      bindings = <&spm_these>;
    };
    combo_shm_these {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_T P_SHFT>;
      bindings = <&shm_these>;
    };
    combo_spm_her {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_R P_SPC>;
      bindings = <&spm_her>;
    };
    combo_shm_her {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_R P_SHFT>;
      bindings = <&shm_her>;
    };
    combo_spm_long {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_L P_SPC>;
      bindings = <&spm_long>;
    };
    combo_shm_long {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_L P_SHFT>;
      bindings = <&shm_long>;
    };
    combo_spm_make {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_M P_SPC>;
      bindings = <&spm_make>;
    };
    combo_shm_make {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_M P_SHFT>;
      bindings = <&shm_make>;
    };
    combo_spm_thing {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_T P_SPC>;
      bindings = <&spm_thing>;
    };
    combo_shm_thing {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_T P_SHFT>;
      bindings = <&shm_thing>;
    };
    combo_spm_see {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_S P_SPC>;
      bindings = <&spm_see>;
    };
    combo_shm_see {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_S P_SHFT>;
      bindings = <&shm_see>;
    };
    combo_spm_him {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_I P_SPC>;
      bindings = <&spm_him>;
    };
    combo_shm_him {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_I P_SHFT>;
      bindings = <&shm_him>;
    };
    combo_spm_two {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_W P_SPC>;
      bindings = <&spm_two>;
    };
    combo_shm_two {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_W P_SHFT>;
      bindings = <&shm_two>;
    };
    combo_spm_has {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_H P_SPC>;
      bindings = <&spm_has>;
    };
    combo_shm_has {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_H P_SHFT>;
      bindings = <&shm_has>;
    };
    combo_spm_look {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_L P_SPC>;
      bindings = <&spm_look>;
    };
    combo_shm_look {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_L P_SHFT>;
      bindings = <&shm_look>;
    };
    combo_spm_more {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_R P_SPC>;
      bindings = <&spm_more>;
    };
    combo_shm_more {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_R P_SHFT>;
      bindings = <&shm_more>;
    };
    combo_spm_day {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_Y P_SPC>;
      bindings = <&spm_day>;
    };
    combo_shm_day {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_Y P_SHFT>;
      bindings = <&shm_day>;
    };
    combo_spm_could {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_D P_SPC>;
      bindings = <&spm_could>;
    };
    combo_shm_could {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_D P_SHFT>;
      bindings = <&shm_could>;
    };
    combo_spm_come {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_M P_SPC>;
      bindings = <&spm_come>;
    };
    combo_shm_come {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_M P_SHFT>;
      bindings = <&shm_come>;
    };
    combo_spm_did {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_I P_SPC>;
      bindings = <&spm_did>;
    };
    combo_shm_did {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_I P_SHFT>;
      bindings = <&shm_did>;
    };
    combo_spm_sound {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_S P_SPC>;
      bindings = <&spm_sound>;
    };
    combo_shm_sound {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_S P_SHFT>;
      bindings = <&shm_sound>;
    };
    combo_spm_most {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_S P_SPC>;
      bindings = <&spm_most>;
    };
    combo_shm_most {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_S P_SHFT>;
      bindings = <&shm_most>;
    };
    combo_spm_number {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_R P_SPC>;
      bindings = <&spm_number>;
    };
    combo_shm_number {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_R P_SHFT>;
      bindings = <&shm_number>;
    };
    combo_spm_who {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_W P_SPC>;
      bindings = <&spm_who>;
    };
    combo_shm_who {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_W P_SHFT>;
      bindings = <&shm_who>;
    };
    combo_spm_over {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_V P_SPC>;
      bindings = <&spm_over>;
    };
    combo_shm_over {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_V P_SHFT>;
      bindings = <&shm_over>;
    };
    combo_spm_know {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_W P_SPC>;
      bindings = <&spm_know>;
    };
    combo_shm_know {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_W P_SHFT>;
      bindings = <&shm_know>;
    };
    combo_spm_water {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_W P_SPC>;
      bindings = <&spm_water>;
    };
    combo_shm_water {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_W P_SHFT>;
      bindings = <&shm_water>;
    };
    combo_spm_than {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_N P_SPC>;
      bindings = <&spm_than>;
    };
    combo_shm_than {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_N P_SHFT>;
      bindings = <&shm_than>;
    };
    combo_spm_call {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_L P_SPC>;
      bindings = <&spm_call>;
    };
    combo_shm_call {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_L P_SHFT>;
      bindings = <&shm_call>;
    };
    combo_spm_first {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_T P_SPC>;
      bindings = <&spm_first>;
    };
    combo_shm_first {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_T P_SHFT>;
      bindings = <&shm_first>;
    };
    combo_spm_people {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_P P_SPC>;
      bindings = <&spm_people>;
    };
    combo_shm_people {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_P P_SHFT>;
      bindings = <&shm_people>;
    };
    combo_spm_may {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_M P_SPC>;
      bindings = <&spm_may>;
    };
    combo_shm_may {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_M P_SHFT>;
      bindings = <&shm_may>;
    };
    combo_spm_down {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_N P_SPC>;
      bindings = <&spm_down>;
    };
    combo_shm_down {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_N P_SHFT>;
      bindings = <&shm_down>;
    };
    combo_spm_side {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_S P_SPC>;
      bindings = <&spm_side>;
    };
    combo_shm_side {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_S P_SHFT>;
      bindings = <&shm_side>;
    };
    combo_spm_been {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_N P_SPC>;
      bindings = <&spm_been>;
    };
    combo_shm_been {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_N P_SHFT>;
      bindings = <&shm_been>;
    };
    combo_spm_now {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_O P_SPC>;
      bindings = <&spm_now>;
    };
    combo_shm_now {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_O P_SHFT>;
      bindings = <&shm_now>;
    };
    combo_spm_find {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_F P_SPC>;
      bindings = <&spm_find>;
    };
    combo_shm_find {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_F P_SHFT>;
      bindings = <&shm_find>;
    };
    combo_spm_any {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_Y P_SPC>;
      bindings = <&spm_any>;
    };
    combo_shm_any {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_Y P_SHFT>;
      bindings = <&shm_any>;
    };
    combo_spm_new {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_N P_SPC>;
      bindings = <&spm_new>;
    };
    combo_shm_new {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_N P_SHFT>;
      bindings = <&shm_new>;
    };
    combo_spm_work {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_O P_SPC>;
      bindings = <&spm_work>;
    };
    combo_shm_work {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_O P_SHFT>;
      bindings = <&shm_work>;
    };
    combo_spm_part {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_T P_SPC>;
      bindings = <&spm_part>;
    };
    combo_shm_part {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_T P_SHFT>;
      bindings = <&shm_part>;
    };
    combo_spm_take {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_T P_SPC>;
      bindings = <&spm_take>;
    };
    combo_shm_take {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_T P_SHFT>;
      bindings = <&shm_take>;
    };
    combo_spm_get {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_G P_SPC>;
      bindings = <&spm_get>;
    };
    combo_shm_get {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_G P_SHFT>;
      bindings = <&shm_get>;
    };
    combo_spm_place {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_P P_SPC>;
      bindings = <&spm_place>;
    };
    combo_shm_place {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_P P_SHFT>;
      bindings = <&shm_place>;
    };
    combo_spm_made {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_M P_SPC>;
      bindings = <&spm_made>;
    };
    combo_shm_made {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_M P_SHFT>;
      bindings = <&shm_made>;
    };
    combo_spm_live {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_V P_SPC>;
      bindings = <&spm_live>;
    };
    combo_shm_live {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_V P_SHFT>;
      bindings = <&shm_live>;
    };
    combo_spm_where {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_R P_SPC>;
      bindings = <&spm_where>;
    };
    combo_shm_where {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_R P_SHFT>;
      bindings = <&shm_where>;
    };
    combo_spm_after {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_R P_SPC>;
      bindings = <&spm_after>;
    };
    combo_shm_after {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_R P_SHFT>;
      bindings = <&shm_after>;
    };
    combo_spm_back {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_K P_SPC>;
      bindings = <&spm_back>;
    };
    combo_shm_back {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_K P_SHFT>;
      bindings = <&shm_back>;
    };
    combo_spm_little {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_T P_SPC>;
      bindings = <&spm_little>;
    };
    combo_shm_little {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_T P_SHFT>;
      bindings = <&shm_little>;
    };
    combo_spm_only {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_Y P_SPC>;
      bindings = <&spm_only>;
    };
    combo_shm_only {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_Y P_SHFT>;
      bindings = <&shm_only>;
    };
    combo_spm_round {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_R P_SPC>;
      bindings = <&spm_round>;
    };
    combo_shm_round {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_R P_SHFT>;
      bindings = <&shm_round>;
    };
    combo_spm_man {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_N P_SPC>;
      bindings = <&spm_man>;
    };
    combo_shm_man {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_N P_SHFT>;
      bindings = <&shm_man>;
    };
    combo_spm_year {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_Y P_SPC>;
      bindings = <&spm_year>;
    };
    combo_shm_year {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_Y P_SHFT>;
      bindings = <&shm_year>;
    };
    combo_spm_came {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_C P_SPC>;
      bindings = <&spm_came>;
    };
    combo_shm_came {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_C P_SHFT>;
      bindings = <&shm_came>;
    };
    combo_spm_show {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_S P_SPC>;
      bindings = <&spm_show>;
    };
    combo_shm_show {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_S P_SHFT>;
      bindings = <&shm_show>;
    };
    combo_spm_every {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_V P_SPC>;
      bindings = <&spm_every>;
    };
    combo_shm_every {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_V P_SHFT>;
      bindings = <&shm_every>;
    };
    combo_spm_good {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_G P_SPC>;
      bindings = <&spm_good>;
    };
    combo_shm_good {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_G P_SHFT>;
      bindings = <&shm_good>;
    };
    combo_spm_give {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_V P_SPC>;
      bindings = <&spm_give>;
    };
    combo_shm_give {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_V P_SHFT>;
      bindings = <&shm_give>;
    };
    combo_spm_our {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_U P_SPC>;
      bindings = <&spm_our>;
    };
    combo_shm_our {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_U P_SHFT>;
      bindings = <&shm_our>;
    };
    combo_spm_under {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_U P_SPC>;
      bindings = <&spm_under>;
    };
    combo_shm_under {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_U P_SHFT>;
      bindings = <&shm_under>;
    };
    combo_spm_name {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_N P_SPC>;
      bindings = <&spm_name>;
    };
    combo_shm_name {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_N P_SHFT>;
      bindings = <&shm_name>;
    };
    combo_spm_very {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_Y P_SPC>;
      bindings = <&spm_very>;
    };
    combo_shm_very {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_Y P_SHFT>;
      bindings = <&shm_very>;
    };
    combo_spm_through {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_U P_SPC>;
      bindings = <&spm_through>;
    };
    combo_shm_through {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_U P_SHFT>;
      bindings = <&shm_through>;
    };
    combo_spm_just {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_T P_SPC>;
      bindings = <&spm_just>;
    };
    combo_shm_just {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_T P_SHFT>;
      bindings = <&shm_just>;
    };
    combo_spm_form {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_O P_SPC>;
      bindings = <&spm_form>;
    };
    combo_shm_form {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_O P_SHFT>;
      bindings = <&shm_form>;
    };
    combo_spm_much {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_U P_SPC>;
      bindings = <&spm_much>;
    };
    combo_shm_much {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_U P_SHFT>;
      bindings = <&shm_much>;
    };
    combo_spm_great {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_G P_SPC>;
      bindings = <&spm_great>;
    };
    combo_shm_great {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_G P_SHFT>;
      bindings = <&shm_great>;
    };
    combo_spm_think {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_K P_SPC>;
      bindings = <&spm_think>;
    };
    combo_shm_think {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_K P_SHFT>;
      bindings = <&shm_think>;
    };
    combo_spm_say {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_Y P_SPC>;
      bindings = <&spm_say>;
    };
    combo_shm_say {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_Y P_SHFT>;
      bindings = <&shm_say>;
    };
    combo_spm_help {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_P P_SPC>;
      bindings = <&spm_help>;
    };
    combo_shm_help {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_P P_SHFT>;
      bindings = <&shm_help>;
    };
    combo_spm_low {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_O P_SPC>;
      bindings = <&spm_low>;
    };
    combo_shm_low {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_O P_SHFT>;
      bindings = <&shm_low>;
    };
    combo_spm_line {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_N P_SPC>;
      bindings = <&spm_line>;
    };
    combo_shm_line {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_N P_SHFT>;
      bindings = <&shm_line>;
    };
    combo_spm_before {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_E P_SPC>;
      bindings = <&spm_before>;
    };
    combo_shm_before {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_E P_SHFT>;
      bindings = <&shm_before>;
    };
    combo_spm_turn {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_U P_SPC>;
      bindings = <&spm_turn>;
    };
    combo_shm_turn {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_U P_SHFT>;
      bindings = <&shm_turn>;
    };
    combo_spm_cause {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_S P_SPC>;
      bindings = <&spm_cause>;
    };
    combo_shm_cause {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_S P_SHFT>;
      bindings = <&shm_cause>;
    };
    combo_spm_same {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_S P_SPC>;
      bindings = <&spm_same>;
    };
    combo_shm_same {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_S P_SHFT>;
      bindings = <&shm_same>;
    };
    combo_spm_mean {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_M P_SPC>;
      bindings = <&spm_mean>;
    };
    combo_shm_mean {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_M P_SHFT>;
      bindings = <&shm_mean>;
    };
    combo_spm_differ {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_E P_SPC>;
      bindings = <&spm_differ>;
    };
    combo_shm_differ {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_E P_SHFT>;
      bindings = <&shm_differ>;
    };
    combo_spm_move {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_V P_SPC>;
      bindings = <&spm_move>;
    };
    combo_shm_move {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_V P_SHFT>;
      bindings = <&shm_move>;
    };
    combo_spm_right {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_R P_SPC>;
      bindings = <&spm_right>;
    };
    combo_shm_right {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_R P_SHFT>;
      bindings = <&shm_right>;
    };
    combo_spm_boy {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_Y P_SPC>;
      bindings = <&spm_boy>;
    };
    combo_shm_boy {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_Y P_SHFT>;
      bindings = <&shm_boy>;
    };
    combo_spm_old {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_O P_SPC>;
      bindings = <&spm_old>;
    };
    combo_shm_old {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_O P_SHFT>;
      bindings = <&shm_old>;
    };
    combo_spm_too {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_T P_SPC>;
      bindings = <&spm_too>;
    };
    combo_shm_too {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_T P_SHFT>;
      bindings = <&shm_too>;
    };
    combo_spm_does {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_J P_SPC>;
      bindings = <&spm_does>;
    };
    combo_shm_does {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_J P_SHFT>;
      bindings = <&shm_does>;
    };
    combo_spm_tell {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_T P_SPC>;
      bindings = <&spm_tell>;
    };
    combo_shm_tell {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_T P_SHFT>;
      bindings = <&shm_tell>;
    };
    combo_spm_sentence {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_S P_SPC>;
      bindings = <&spm_sentence>;
    };
    combo_shm_sentence {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_S P_SHFT>;
      bindings = <&shm_sentence>;
    };
    combo_spm_set {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_S P_SPC>;
      bindings = <&spm_set>;
    };
    combo_shm_set {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_S P_SHFT>;
      bindings = <&shm_set>;
    };
    combo_spm_three {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_V P_SPC>;
      bindings = <&spm_three>;
    };
    combo_shm_three {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_V P_SHFT>;
      bindings = <&shm_three>;
    };
    combo_spm_want {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_W P_SPC>;
      bindings = <&spm_want>;
    };
    combo_shm_want {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_W P_SHFT>;
      bindings = <&shm_want>;
    };
    combo_spm_air {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_I P_SPC>;
      bindings = <&spm_air>;
    };
    combo_shm_air {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_I P_SHFT>;
      bindings = <&shm_air>;
    };
    combo_spm_well {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_W P_SPC>;
      bindings = <&spm_well>;
    };
    combo_shm_well {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_W P_SHFT>;
      bindings = <&shm_well>;
    };
    combo_spm_also {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_O P_SPC>;
      bindings = <&spm_also>;
    };
    combo_shm_also {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_O P_SHFT>;
      bindings = <&shm_also>;
    };
    combo_spm_play {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_Y P_SPC>;
      bindings = <&spm_play>;
    };
    combo_shm_play {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_Y P_SHFT>;
      bindings = <&shm_play>;
    };
    combo_spm_small {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_S P_SPC>;
      bindings = <&spm_small>;
    };
    combo_shm_small {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_S P_SHFT>;
      bindings = <&shm_small>;
    };
    combo_spm_end {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_F P_SPC>;
      bindings = <&spm_end>;
    };
    combo_shm_end {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_F P_SHFT>;
      bindings = <&shm_end>;
    };
    combo_spm_put {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_U P_SPC>;
      bindings = <&spm_put>;
    };
    combo_shm_put {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_U P_SHFT>;
      bindings = <&shm_put>;
    };
    combo_spm_home {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_O P_SPC>;
      bindings = <&spm_home>;
    };
    combo_shm_home {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_O P_SHFT>;
      bindings = <&shm_home>;
    };
    combo_spm_read {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_R P_SPC>;
      bindings = <&spm_read>;
    };
    combo_shm_read {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_R P_SHFT>;
      bindings = <&shm_read>;
    };
    combo_spm_hand {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_H P_SPC>;
      bindings = <&spm_hand>;
    };
    combo_shm_hand {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_H P_SHFT>;
      bindings = <&shm_hand>;
    };
    combo_spm_port {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_R P_SPC>;
      bindings = <&spm_port>;
    };
    combo_shm_port {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_R P_SHFT>;
      bindings = <&shm_port>;
    };
    combo_spm_large {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_R P_SPC>;
      bindings = <&spm_large>;
    };
    combo_shm_large {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_R P_SHFT>;
      bindings = <&shm_large>;
    };
    combo_spm_spell {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_S P_SPC>;
      bindings = <&spm_spell>;
    };
    combo_shm_spell {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_S P_SHFT>;
      bindings = <&shm_spell>;
    };
    combo_spm_add {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_B P_SPC>;
      bindings = <&spm_add>;
    };
    combo_shm_add {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_B P_SHFT>;
      bindings = <&shm_add>;
    };
    combo_spm_even {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_V P_SPC>;
      bindings = <&spm_even>;
    };
    combo_shm_even {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_V P_SHFT>;
      bindings = <&shm_even>;
    };
    combo_spm_land {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_L P_SPC>;
      bindings = <&spm_land>;
    };
    combo_shm_land {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_L P_SHFT>;
      bindings = <&shm_land>;
    };
    combo_spm_here {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_H P_SPC>;
      bindings = <&spm_here>;
    };
    combo_shm_here {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_H P_SHFT>;
      bindings = <&shm_here>;
    };
    combo_spm_must {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_U P_SPC>;
      bindings = <&spm_must>;
    };
    combo_shm_must {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_U P_SHFT>;
      bindings = <&shm_must>;
    };
    combo_spm_big {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_G P_SPC>;
      bindings = <&spm_big>;
    };
    combo_shm_big {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_G P_SHFT>;
      bindings = <&shm_big>;
    };
    combo_spm_high {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_H P_SPC>;
      bindings = <&spm_high>;
    };
    combo_shm_high {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_H P_SHFT>;
      bindings = <&shm_high>;
    };
    combo_spm_such {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_U P_SPC>;
      bindings = <&spm_such>;
    };
    combo_shm_such {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_U P_SHFT>;
      bindings = <&shm_such>;
    };
    combo_spm_follow {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_L P_SPC>;
      bindings = <&spm_follow>;
    };
    combo_shm_follow {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_L P_SHFT>;
      bindings = <&shm_follow>;
    };
    combo_spm_act {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_F P_SPC>;
      bindings = <&spm_act>;
    };
    combo_shm_act {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_F P_SHFT>;
      bindings = <&shm_act>;
    };
    combo_spm_why {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_Y P_SPC>;
      bindings = <&spm_why>;
    };
    combo_shm_why {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_Y P_SHFT>;
      bindings = <&shm_why>;
    };
    combo_spm_ask {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_K P_SPC>;
      bindings = <&spm_ask>;
    };
    combo_shm_ask {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_K P_SHFT>;
      bindings = <&shm_ask>;
    };
    combo_spm_men {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_M P_SPC>;
      bindings = <&spm_men>;
    };
    combo_shm_men {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_M P_SHFT>;
      bindings = <&shm_men>;
    };
    combo_spm_change {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_G P_SPC>;
      bindings = <&spm_change>;
    };
    combo_shm_change {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_G P_SHFT>;
      bindings = <&shm_change>;
    };
    combo_spm_went {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_W P_SPC>;
      bindings = <&spm_went>;
    };
    combo_shm_went {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_W P_SHFT>;
      bindings = <&shm_went>;
    };
    combo_spm_light {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_L P_SPC>;
      bindings = <&spm_light>;
    };
    combo_shm_light {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_L P_SHFT>;
      bindings = <&shm_light>;
    };
    combo_spm_kind {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_K P_SPC>;
      bindings = <&spm_kind>;
    };
    combo_shm_kind {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_K P_SHFT>;
      bindings = <&shm_kind>;
    };
    combo_spm_off {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_O P_SPC>;
      bindings = <&spm_off>;
    };
    combo_shm_off {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_O P_SHFT>;
      bindings = <&shm_off>;
    };
    combo_spm_need {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_N P_SPC>;
      bindings = <&spm_need>;
    };
    combo_shm_need {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_N P_SHFT>;
      bindings = <&shm_need>;
    };
    combo_spm_house {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_H P_SPC>;
      bindings = <&spm_house>;
    };
    combo_shm_house {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_H P_SHFT>;
      bindings = <&shm_house>;
    };
    combo_spm_picture {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_P P_SPC>;
      bindings = <&spm_picture>;
    };
    combo_shm_picture {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_P P_SHFT>;
      bindings = <&shm_picture>;
    };
    combo_spm_try {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_X P_SPC>;
      bindings = <&spm_try>;
    };
    combo_shm_try {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_X P_SHFT>;
      bindings = <&shm_try>;
    };
    combo_spm_again {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_N P_SPC>;
      bindings = <&spm_again>;
    };
    combo_shm_again {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_N P_SHFT>;
      bindings = <&shm_again>;
    };
    combo_spm_animal {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_N P_SPC>;
      bindings = <&spm_animal>;
    };
    combo_shm_animal {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_N P_SHFT>;
      bindings = <&shm_animal>;
    };
    combo_spm_point {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_P P_SPC>;
      bindings = <&spm_point>;
    };
    combo_shm_point {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_P P_SHFT>;
      bindings = <&shm_point>;
    };
    combo_spm_mother {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_M P_SPC>;
      bindings = <&spm_mother>;
    };
    combo_shm_mother {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_M P_SHFT>;
      bindings = <&shm_mother>;
    };
    combo_spm_world {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_W P_SPC>;
      bindings = <&spm_world>;
    };
    combo_shm_world {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_W P_SHFT>;
      bindings = <&shm_world>;
    };
    combo_spm_near {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_N P_SPC>;
      bindings = <&spm_near>;
    };
    combo_shm_near {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_N P_SHFT>;
      bindings = <&shm_near>;
    };
    combo_spm_build {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_L P_SPC>;
      bindings = <&spm_build>;
    };
    combo_shm_build {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_L P_SHFT>;
      bindings = <&shm_build>;
    };
    combo_spm_self {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_S P_SPC>;
      bindings = <&spm_self>;
    };
    combo_shm_self {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_S P_SHFT>;
      bindings = <&shm_self>;
    };
    combo_spm_earth {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_I P_SPC>;
      bindings = <&spm_earth>;
    };
    combo_shm_earth {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_I P_SHFT>;
      bindings = <&shm_earth>;
    };
    combo_spm_father {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_F P_SPC>;
      bindings = <&spm_father>;
    };
    combo_shm_father {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_F P_SHFT>;
      bindings = <&shm_father>;
    };
    combo_spm_head {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_Q P_SPC>;
      bindings = <&spm_head>;
    };
    combo_shm_head {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_Q P_SHFT>;
      bindings = <&shm_head>;
    };
    combo_spm_stand {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_S P_SPC>;
      bindings = <&spm_stand>;
    };
    combo_shm_stand {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_S P_SHFT>;
      bindings = <&shm_stand>;
    };
    combo_spm_own {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_O P_SPC>;
      bindings = <&spm_own>;
    };
    combo_shm_own {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_O P_SHFT>;
      bindings = <&shm_own>;
    };
    combo_spm_page {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_P P_SPC>;
      bindings = <&spm_page>;
    };
    combo_shm_page {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_P P_SHFT>;
      bindings = <&shm_page>;
    };
    combo_spm_should {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_U P_SPC>;
      bindings = <&spm_should>;
    };
    combo_shm_should {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_U P_SHFT>;
      bindings = <&shm_should>;
    };
    combo_spm_country {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_Y P_SPC>;
      bindings = <&spm_country>;
    };
    combo_shm_country {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_Y P_SHFT>;
      bindings = <&shm_country>;
    };
    combo_spm_found {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_U P_SPC>;
      bindings = <&spm_found>;
    };
    combo_shm_found {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_U P_SHFT>;
      bindings = <&shm_found>;
    };
    combo_spm_answer {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_S P_SPC>;
      bindings = <&spm_answer>;
    };
    combo_shm_answer {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_S P_SHFT>;
      bindings = <&shm_answer>;
    };
    combo_spm_school {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_V P_SPC>;
      bindings = <&spm_school>;
    };
    combo_shm_school {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_V P_SHFT>;
      bindings = <&shm_school>;
    };
    combo_spm_grow {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_O P_SPC>;
      bindings = <&spm_grow>;
    };
    combo_shm_grow {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_O P_SHFT>;
      bindings = <&shm_grow>;
    };
    combo_spm_study {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_X P_SPC>;
      bindings = <&spm_study>;
    };
    combo_shm_study {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_X P_SHFT>;
      bindings = <&shm_study>;
    };
    combo_spm_still {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_Z P_SPC>;
      bindings = <&spm_still>;
    };
    combo_shm_still {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_Z P_SHFT>;
      bindings = <&shm_still>;
    };
    combo_spm_learn {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_L P_SPC>;
      bindings = <&spm_learn>;
    };
    combo_shm_learn {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_L P_SHFT>;
      bindings = <&shm_learn>;
    };
    combo_spm_plant {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_P P_SPC>;
      bindings = <&spm_plant>;
    };
    combo_shm_plant {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_P P_SHFT>;
      bindings = <&shm_plant>;
    };
    combo_spm_cover {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_R P_SPC>;
      bindings = <&spm_cover>;
    };
    combo_shm_cover {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_R P_SHFT>;
      bindings = <&shm_cover>;
    };
    combo_spm_food {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_F P_SPC>;
      bindings = <&spm_food>;
    };
    combo_shm_food {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_F P_SHFT>;
      bindings = <&shm_food>;
    };
    combo_spm_sun {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_U P_SPC>;
      bindings = <&spm_sun>;
    };
    combo_shm_sun {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_U P_SHFT>;
      bindings = <&shm_sun>;
    };
    combo_spm_four {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_G P_SPC>;
      bindings = <&spm_four>;
    };
    combo_shm_four {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_G P_SHFT>;
      bindings = <&shm_four>;
    };
    combo_spm_thought {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_U P_SPC>;
      bindings = <&spm_thought>;
    };
    combo_shm_thought {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_U P_SHFT>;
      bindings = <&shm_thought>;
    };
    combo_spm_let {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_M P_SPC>;
      bindings = <&spm_let>;
    };
    combo_shm_let {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_M P_SHFT>;
      bindings = <&shm_let>;
    };
    combo_spm_keep {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_P P_SPC>;
      bindings = <&spm_keep>;
    };
    combo_shm_keep {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_P P_SHFT>;
      bindings = <&shm_keep>;
    };
    combo_spm_eye {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_J P_SPC>;
      bindings = <&spm_eye>;
    };
    combo_shm_eye {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_J P_SHFT>;
      bindings = <&shm_eye>;
    };
    combo_spm_never {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_V P_SPC>;
      bindings = <&spm_never>;
    };
    combo_shm_never {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_V P_SHFT>;
      bindings = <&shm_never>;
    };
    combo_spm_last {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_P P_SPC>;
      bindings = <&spm_last>;
    };
    combo_shm_last {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_P P_SHFT>;
      bindings = <&shm_last>;
    };
    combo_spm_door {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_Q P_SPC>;
      bindings = <&spm_door>;
    };
    combo_shm_door {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_Q P_SHFT>;
      bindings = <&shm_door>;
    };
    combo_spm_between {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_C P_SPC>;
      bindings = <&spm_between>;
    };
    combo_shm_between {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_C P_SHFT>;
      bindings = <&shm_between>;
    };
    combo_spm_city {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_I P_SPC>;
      bindings = <&spm_city>;
    };
    combo_shm_city {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_I P_SHFT>;
      bindings = <&shm_city>;
    };
    combo_spm_tree {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_Z P_SPC>;
      bindings = <&spm_tree>;
    };
    combo_shm_tree {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_Z P_SHFT>;
      bindings = <&shm_tree>;
    };
    combo_spm_cross {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_J P_SPC>;
      bindings = <&spm_cross>;
    };
    combo_shm_cross {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_J P_SHFT>;
      bindings = <&shm_cross>;
    };
    combo_spm_since {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_I P_SPC>;
      bindings = <&spm_since>;
    };
    combo_shm_since {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_I P_SHFT>;
      bindings = <&shm_since>;
    };
    combo_spm_hard {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_V P_SPC>;
      bindings = <&spm_hard>;
    };
    combo_shm_hard {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_V P_SHFT>;
      bindings = <&shm_hard>;
    };
    combo_spm_start {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_J P_SPC>;
      bindings = <&spm_start>;
    };
    combo_shm_start {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_J P_SHFT>;
      bindings = <&shm_start>;
    };
    combo_spm_might {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_I P_SPC>;
      bindings = <&spm_might>;
    };
    combo_shm_might {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_I P_SHFT>;
      bindings = <&shm_might>;
    };
    combo_spm_story {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_O P_SPC>;
      bindings = <&spm_story>;
    };
    combo_shm_story {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_O P_SHFT>;
      bindings = <&shm_story>;
    };
    combo_spm_saw {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_Q P_SPC>;
      bindings = <&spm_saw>;
    };
    combo_shm_saw {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_Q P_SHFT>;
      bindings = <&shm_saw>;
    };
    combo_spm_far {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_I P_SPC>;
      bindings = <&spm_far>;
    };
    combo_shm_far {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_I P_SHFT>;
      bindings = <&shm_far>;
    };
    combo_spm_sea {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_K P_SPC>;
      bindings = <&spm_sea>;
    };
    combo_shm_sea {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_K P_SHFT>;
      bindings = <&shm_sea>;
    };
    combo_spm_draw {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_V P_SPC>;
      bindings = <&spm_draw>;
    };
    combo_shm_draw {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_V P_SHFT>;
      bindings = <&shm_draw>;
    };
    combo_spm_left {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_Q P_SPC>;
      bindings = <&spm_left>;
    };
    combo_shm_left {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_Q P_SHFT>;
      bindings = <&shm_left>;
    };
    combo_spm_late {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_U P_SPC>;
      bindings = <&spm_late>;
    };
    combo_shm_late {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_U P_SHFT>;
      bindings = <&shm_late>;
    };
    combo_spm_run {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_R P_SPC>;
      bindings = <&spm_run>;
    };
    combo_shm_run {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_R P_SHFT>;
      bindings = <&shm_run>;
    };
    combo_spm_donSQTt {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_X P_SPC>;
      bindings = <&spm_donSQTt>;
    };
    combo_shm_donSQTt {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_X P_SHFT>;
      bindings = <&shm_donSQTt>;
    };
    combo_spm_while {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_W P_SPC>;
      bindings = <&spm_while>;
    };
    combo_shm_while {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_W P_SHFT>;
      bindings = <&shm_while>;
    };
    combo_spm_press {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_P P_SPC>;
      bindings = <&spm_press>;
    };
    combo_shm_press {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_P P_SHFT>;
      bindings = <&shm_press>;
    };
    combo_spm_close {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_K P_SPC>;
      bindings = <&spm_close>;
    };
    combo_shm_close {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_K P_SHFT>;
      bindings = <&shm_close>;
    };
    combo_spm_night {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_Q P_SPC>;
      bindings = <&spm_night>;
    };
    combo_shm_night {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_Q P_SHFT>;
      bindings = <&shm_night>;
    };
    combo_spm_real {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_R P_SPC>;
      bindings = <&spm_real>;
    };
    combo_shm_real {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_R P_SHFT>;
      bindings = <&shm_real>;
    };
    combo_spm_life {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_X P_SPC>;
      bindings = <&spm_life>;
    };
    combo_shm_life {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_X P_SHFT>;
      bindings = <&shm_life>;
    };
    combo_spm_few {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_J P_SPC>;
      bindings = <&spm_few>;
    };
    combo_shm_few {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_J P_SHFT>;
      bindings = <&shm_few>;
    };
    combo_spm_stop {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_P P_SPC>;
      bindings = <&spm_stop>;
    };
    combo_shm_stop {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_P P_SHFT>;
      bindings = <&shm_stop>;
    };
    combo_spm_open {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_O P_SPC>;
      bindings = <&spm_open>;
    };
    combo_shm_open {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_O P_SHFT>;
      bindings = <&shm_open>;
    };
    combo_spm_seem {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_Q P_SPC>;
      bindings = <&spm_seem>;
    };
    combo_shm_seem {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_Q P_SHFT>;
      bindings = <&shm_seem>;
    };
    combo_spm_together {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_Q P_SPC>;
      bindings = <&spm_together>;
    };
    combo_shm_together {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_Q P_SHFT>;
      bindings = <&shm_together>;
    };
    combo_spm_next {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_X P_SPC>;
      bindings = <&spm_next>;
    };
    combo_shm_next {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_X P_SHFT>;
      bindings = <&shm_next>;
    };
    combo_spm_white {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_W P_SPC>;
      bindings = <&spm_white>;
    };
    combo_shm_white {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_W P_SHFT>;
      bindings = <&shm_white>;
    };
    combo_spm_children {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_Q P_SPC>;
      bindings = <&spm_children>;
    };
    combo_shm_children {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_Q P_SHFT>;
      bindings = <&shm_children>;
    };
    combo_spm_begin {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_J P_SPC>;
      bindings = <&spm_begin>;
    };
    combo_shm_begin {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_J P_SHFT>;
      bindings = <&shm_begin>;
    };
    combo_spm_got {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_J P_SPC>;
      bindings = <&spm_got>;
    };
    combo_shm_got {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_J P_SHFT>;
      bindings = <&shm_got>;
    };
    combo_spm_walk {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_W P_SPC>;
      bindings = <&spm_walk>;
    };
    combo_shm_walk {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_W P_SHFT>;
      bindings = <&shm_walk>;
    };
    combo_spm_example {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_X P_SPC>;
      bindings = <&spm_example>;
    };
    combo_shm_example {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_X P_SHFT>;
      bindings = <&shm_example>;
    };
    combo_spm_ease {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_Z P_SPC>;
      bindings = <&spm_ease>;
    };
    combo_shm_ease {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_Z P_SHFT>;
      bindings = <&shm_ease>;
    };
    combo_spm_paper {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_P P_SPC>;
      bindings = <&spm_paper>;
    };
    combo_shm_paper {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_P P_SHFT>;
      bindings = <&shm_paper>;
    };
    combo_spm_often {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_X P_SPC>;
      bindings = <&spm_often>;
    };
    combo_shm_often {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_X P_SHFT>;
      bindings = <&shm_often>;
    };
    combo_spm_always {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_Y P_SPC>;
      bindings = <&spm_always>;
    };
    combo_shm_always {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_Y P_SHFT>;
      bindings = <&shm_always>;
    };
    combo_spm_music {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_U P_SPC>;
      bindings = <&spm_music>;
    };
    combo_shm_music {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_U P_SHFT>;
      bindings = <&shm_music>;
    };
    combo_spm_those {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_X P_SPC>;
      bindings = <&spm_those>;
    };
    combo_shm_those {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_X P_SHFT>;
      bindings = <&shm_those>;
    };
    combo_spm_both {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_Q P_SPC>;
      bindings = <&spm_both>;
    };
    combo_shm_both {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_Q P_SHFT>;
      bindings = <&shm_both>;
    };
    combo_spm_mark {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_M P_SPC>;
      bindings = <&spm_mark>;
    };
    combo_shm_mark {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_M P_SHFT>;
      bindings = <&shm_mark>;
    };
    combo_spm_book {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_V P_SPC>;
      bindings = <&spm_book>;
    };
    combo_shm_book {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_V P_SHFT>;
      bindings = <&shm_book>;
    };
    combo_spm_letter {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_Z P_SPC>;
      bindings = <&spm_letter>;
    };
    combo_shm_letter {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_Z P_SHFT>;
      bindings = <&shm_letter>;
    };
    combo_spm_until {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_U P_SPC>;
      bindings = <&spm_until>;
    };
    combo_shm_until {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_U P_SHFT>;
      bindings = <&shm_until>;
    };
    combo_spm_mile {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_M P_SPC>;
      bindings = <&spm_mile>;
    };
    combo_shm_mile {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_M P_SHFT>;
      bindings = <&shm_mile>;
    };
    combo_spm_river {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_V P_SPC>;
      bindings = <&spm_river>;
    };
    combo_shm_river {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_V P_SHFT>;
      bindings = <&shm_river>;
    };
    combo_spm_car {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_V P_SPC>;
      bindings = <&spm_car>;
    };
    combo_shm_car {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_V P_SHFT>;
      bindings = <&shm_car>;
    };
    combo_spm_feet {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_K P_SPC>;
      bindings = <&spm_feet>;
    };
    combo_shm_feet {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_K P_SHFT>;
      bindings = <&shm_feet>;
    };
    combo_spm_care {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_X P_SPC>;
      bindings = <&spm_care>;
    };
    combo_shm_care {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_X P_SHFT>;
      bindings = <&shm_care>;
    };
    combo_spm_second {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_Z P_SPC>;
      bindings = <&spm_second>;
    };
    combo_shm_second {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_Z P_SHFT>;
      bindings = <&shm_second>;
    };
    combo_spm_group {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_K P_SPC>;
      bindings = <&spm_group>;
    };
    combo_shm_group {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_K P_SHFT>;
      bindings = <&shm_group>;
    };
    combo_spm_carry {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_V P_SPC>;
      bindings = <&spm_carry>;
    };
    combo_shm_carry {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_V P_SHFT>;
      bindings = <&shm_carry>;
    };
    combo_spm_took {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_Z P_SPC>;
      bindings = <&spm_took>;
    };
    combo_shm_took {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_Z P_SHFT>;
      bindings = <&shm_took>;
    };
    combo_spm_rain {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_R P_SPC>;
      bindings = <&spm_rain>;
    };
    combo_shm_rain {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_R P_SHFT>;
      bindings = <&shm_rain>;
    };
    combo_spm_eat {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_X P_SPC>;
      bindings = <&spm_eat>;
    };
    combo_shm_eat {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_X P_SHFT>;
      bindings = <&shm_eat>;
    };
    combo_spm_room {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_R P_SPC>;
      bindings = <&spm_room>;
    };
    combo_shm_room {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_R P_SHFT>;
      bindings = <&shm_room>;
    };
    combo_spm_friend {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_Q P_SPC>;
      bindings = <&spm_friend>;
    };
    combo_shm_friend {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_Q P_SHFT>;
      bindings = <&shm_friend>;
    };
    combo_spm_began {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_X P_SPC>;
      bindings = <&spm_began>;
    };
    combo_shm_began {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_X P_SHFT>;
      bindings = <&shm_began>;
    };
    combo_spm_idea {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_J P_SPC>;
      bindings = <&spm_idea>;
    };
    combo_shm_idea {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_J P_SHFT>;
      bindings = <&shm_idea>;
    };
    combo_spm_fish {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_V P_SPC>;
      bindings = <&spm_fish>;
    };
    combo_shm_fish {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_V P_SHFT>;
      bindings = <&shm_fish>;
    };
    combo_spm_mountain {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_P P_SPC>;
      bindings = <&spm_mountain>;
    };
    combo_shm_mountain {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_P P_SHFT>;
      bindings = <&shm_mountain>;
    };
    combo_spm_north {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_Y P_SPC>;
      bindings = <&spm_north>;
    };
    combo_shm_north {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_Y P_SHFT>;
      bindings = <&shm_north>;
    };
    combo_spm_once {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_Z P_SPC>;
      bindings = <&spm_once>;
    };
    combo_shm_once {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_Z P_SHFT>;
      bindings = <&shm_once>;
    };
    combo_spm_base {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_Z P_SPC>;
      bindings = <&spm_base>;
    };
    combo_shm_base {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_Z P_SHFT>;
      bindings = <&shm_base>;
    };
    combo_spm_hear {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_Z P_SPC>;
      bindings = <&spm_hear>;
    };
    combo_shm_hear {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_Z P_SHFT>;
      bindings = <&shm_hear>;
    };
    combo_spm_horse {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_X P_SPC>;
      bindings = <&spm_horse>;
    };
    combo_shm_horse {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_X P_SHFT>;
      bindings = <&shm_horse>;
    };
    combo_spm_cut {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_U P_SPC>;
      bindings = <&spm_cut>;
    };
    combo_shm_cut {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_U P_SHFT>;
      bindings = <&shm_cut>;
    };
    combo_spm_sure {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_U P_SPC>;
      bindings = <&spm_sure>;
    };
    combo_shm_sure {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_U P_SHFT>;
      bindings = <&shm_sure>;
    };
    combo_spm_watch {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_W P_SPC>;
      bindings = <&spm_watch>;
    };
    combo_shm_watch {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_W P_SHFT>;
      bindings = <&shm_watch>;
    };
    combo_spm_color {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_Z P_SPC>;
      bindings = <&spm_color>;
    };
    combo_shm_color {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_Z P_SHFT>;
      bindings = <&shm_color>;
    };
    combo_spm_face {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_X P_SPC>;
      bindings = <&spm_face>;
    };
    combo_shm_face {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_X P_SHFT>;
      bindings = <&shm_face>;
    };
    combo_spm_wood {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_W P_X P_SPC>;
      bindings = <&spm_wood>;
    };
    combo_shm_wood {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_W P_X P_SHFT>;
      bindings = <&shm_wood>;
    };
    combo_spm_main {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_Q P_SPC>;
      bindings = <&spm_main>;
    };
    combo_shm_main {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_Q P_SHFT>;
      bindings = <&shm_main>;
    };
    combo_spm_enough {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_V P_SPC>;
      bindings = <&spm_enough>;
    };
    combo_shm_enough {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_V P_SHFT>;
      bindings = <&shm_enough>;
    };
    combo_spm_plain {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_P P_SPC>;
      bindings = <&spm_plain>;
    };
    combo_shm_plain {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_P P_SHFT>;
      bindings = <&shm_plain>;
    };
    combo_spm_girl {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_Q P_SPC>;
      bindings = <&spm_girl>;
    };
    combo_shm_girl {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_Q P_SHFT>;
      bindings = <&shm_girl>;
    };
    combo_spm_usual {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_X P_SPC>;
      bindings = <&spm_usual>;
    };
    combo_shm_usual {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_X P_SHFT>;
      bindings = <&shm_usual>;
    };
    combo_spm_young {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_Y P_SPC>;
      bindings = <&spm_young>;
    };
    combo_shm_young {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_Y P_SHFT>;
      bindings = <&shm_young>;
    };
    combo_spm_ready {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_Z P_SPC>;
      bindings = <&spm_ready>;
    };
    combo_shm_ready {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_Z P_SHFT>;
      bindings = <&shm_ready>;
    };
    combo_spm_above {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_V P_SPC>;
      bindings = <&spm_above>;
    };
    combo_shm_above {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_V P_SHFT>;
      bindings = <&shm_above>;
    };
    combo_spm_ever {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_V P_SPC>;
      bindings = <&spm_ever>;
    };
    combo_shm_ever {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_V P_SHFT>;
      bindings = <&shm_ever>;
    };
    combo_spm_red {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_Z P_SPC>;
      bindings = <&spm_red>;
    };
    combo_shm_red {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_Z P_SHFT>;
      bindings = <&shm_red>;
    };
    combo_spm_list {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_K P_SPC>;
      bindings = <&spm_list>;
    };
    combo_shm_list {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_K P_SHFT>;
      bindings = <&shm_list>;
    };
    combo_spm_though {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_Z P_SPC>;
      bindings = <&spm_though>;
    };
    combo_shm_though {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_Z P_SHFT>;
      bindings = <&shm_though>;
    };
    combo_spm_feel {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_Y P_SPC>;
      bindings = <&spm_feel>;
    };
    combo_shm_feel {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_Y P_SHFT>;
      bindings = <&shm_feel>;
    };
    combo_spm_talk {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_K P_SPC>;
      bindings = <&spm_talk>;
    };
    combo_shm_talk {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_K P_SHFT>;
      bindings = <&shm_talk>;
    };
    combo_spm_bird {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_Q P_SPC>;
      bindings = <&spm_bird>;
    };
    combo_shm_bird {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_Q P_SHFT>;
      bindings = <&shm_bird>;
    };
    combo_spm_body {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_Y P_SPC>;
      bindings = <&spm_body>;
    };
    combo_shm_body {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_Y P_SHFT>;
      bindings = <&shm_body>;
    };
    combo_spm_dog {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_X P_SPC>;
      bindings = <&spm_dog>;
    };
    combo_shm_dog {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_X P_SHFT>;
      bindings = <&shm_dog>;
    };
    combo_spm_family {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_Z P_SPC>;
      bindings = <&spm_family>;
    };
    combo_shm_family {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_Z P_SHFT>;
      bindings = <&shm_family>;
    };
    combo_spm_direct {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_X P_SPC>;
      bindings = <&spm_direct>;
    };
    combo_shm_direct {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_X P_SHFT>;
      bindings = <&shm_direct>;
    };
    combo_spm_pose {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_Q P_SPC>;
      bindings = <&spm_pose>;
    };
    combo_shm_pose {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_Q P_SHFT>;
      bindings = <&shm_pose>;
    };
    combo_spm_leave {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_V P_SPC>;
      bindings = <&spm_leave>;
    };
    combo_shm_leave {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_V P_SHFT>;
      bindings = <&shm_leave>;
    };
    combo_spm_song {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_Z P_SPC>;
      bindings = <&spm_song>;
    };
    combo_shm_song {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_Z P_SHFT>;
      bindings = <&shm_song>;
    };
    combo_spm_measure {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_X P_SPC>;
      bindings = <&spm_measure>;
    };
    combo_shm_measure {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_X P_SHFT>;
      bindings = <&shm_measure>;
    };
    combo_spm_product {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_X P_SPC>;
      bindings = <&spm_product>;
    };
    combo_shm_product {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_X P_SHFT>;
      bindings = <&shm_product>;
    };
    combo_spm_black {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_Q P_SPC>;
      bindings = <&spm_black>;
    };
    combo_shm_black {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_Q P_SHFT>;
      bindings = <&shm_black>;
    };
    combo_spm_numeral {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_Z P_SPC>;
      bindings = <&spm_numeral>;
    };
    combo_shm_numeral {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_Z P_SHFT>;
      bindings = <&shm_numeral>;
    };
    combo_spm_wind {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_W P_Z P_SPC>;
      bindings = <&spm_wind>;
    };
    combo_shm_wind {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_W P_Z P_SHFT>;
      bindings = <&shm_wind>;
    };
    combo_spm_question {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_Q P_SPC>;
      bindings = <&spm_question>;
    };
    combo_shm_question {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_Q P_SHFT>;
      bindings = <&shm_question>;
    };
    combo_spm_happen {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_Z P_SPC>;
      bindings = <&spm_happen>;
    };
    combo_shm_happen {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_Z P_SHFT>;
      bindings = <&shm_happen>;
    };
    combo_spm_ship {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_Z P_SPC>;
      bindings = <&spm_ship>;
    };
    combo_shm_ship {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_Z P_SHFT>;
      bindings = <&shm_ship>;
    };
    combo_spm_rock {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_X P_SPC>;
      bindings = <&spm_rock>;
    };
    combo_shm_rock {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_X P_SHFT>;
      bindings = <&shm_rock>;
    };
    combo_spm_knew {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_Y P_SPC>;
      bindings = <&spm_knew>;
    };
    combo_shm_knew {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_Y P_SHFT>;
      bindings = <&shm_knew>;
    };
    combo_spm_king {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_Z P_SPC>;
      bindings = <&spm_king>;
    };
    combo_shm_king {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_Z P_SHFT>;
      bindings = <&shm_king>;
    };
    combo_spm_size {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_Z P_SPC>;
      bindings = <&spm_size>;
    };
    combo_shm_size {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_Z P_SHFT>;
      bindings = <&shm_size>;
    };
    combo_spm_early {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_Y P_SPC>;
      bindings = <&spm_early>;
    };
    combo_shm_early {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_Y P_SHFT>;
      bindings = <&shm_early>;
    };
    combo_spm_five {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_V P_SPC>;
      bindings = <&spm_five>;
    };
    combo_shm_five {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_V P_SHFT>;
      bindings = <&shm_five>;
    };
    combo_spm_six {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_X P_SPC>;
      bindings = <&spm_six>;
    };
    combo_shm_six {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_X P_SHFT>;
      bindings = <&shm_six>;
    };
    combo_spm_travel {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_X P_SPC>;
      bindings = <&spm_travel>;
    };
    combo_shm_travel {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_X P_SHFT>;
      bindings = <&shm_travel>;
    };
    combo_spm_several {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_Z P_SPC>;
      bindings = <&spm_several>;
    };
    combo_shm_several {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_Z P_SHFT>;
      bindings = <&shm_several>;
    };
    combo_spm_lay {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_Y P_SPC>;
      bindings = <&spm_lay>;
    };
    combo_shm_lay {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_Y P_SHFT>;
      bindings = <&shm_lay>;
    };
    combo_spm_money {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_X P_Y P_SPC>;
      bindings = <&spm_money>;
    };
    combo_shm_money {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_X P_Y P_SHFT>;
      bindings = <&shm_money>;
    };
    combo_spm_fly {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Y P_Z P_SPC>;
      bindings = <&spm_fly>;
    };
    combo_shm_fly {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Y P_Z P_SHFT>;
      bindings = <&shm_fly>;
    };
    combo_spm_box {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_X P_SPC>;
      bindings = <&spm_box>;
    };
    combo_shm_box {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_X P_SHFT>;
      bindings = <&shm_box>;
    };

    // COMBOS END
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        DEF_Q    DEF_W    DEF_F    DEF_P    DEF_B          DEF_J    DEF_L    DEF_U    DEF_Y    DEF_SEMI
        DEF_A    DEF_R    DEF_S    DEF_T    DEF_G          DEF_M    DEF_N    DEF_E    DEF_I    DEF_O
        DEF_Z    DEF_X    DEF_C    DEF_D    DEF_V          DEF_K    DEF_H    DEF_COMA DEF_DOT  DEF_QUOT
                                   DEF_NUM  DEF_SPC        DEF_SHFT DEF_NAV
      >;
    };

    navigation_layer {
      bindings = <
        NAV_DEL  NAV_ESC  NAV_BSPC NAV_RET  MED_PRNT       GEN_TRAN NUM_LBKT NUM_RBKT NAV_GRV  NAV_BSLH
        NAV_LEFT NAV_UP   NAV_DOWN NAV_RGHT NAV_TAB        GEN_TRAN GEN_CTRL GEN_GUI  GEN_ALT  GEN_MED
        NAV_HOME NAV_PGUP NAV_PGDN NAV_END  NUM_STAB       GEN_TRAN NUM_LBRC NUM_RBRC NAV_TILD NAV_PIPE
                                   GEN_TRAN DEF_SHFT       DEF_SHFT GEN_TRAN
      >;
    };

    number_layer {
      bindings = <
        NAV_DEL  NAV_ESC  NAV_BSPC NAV_RET  MED_PRNT       NUM_PLUS NUM_N7    NUM_N8    NUM_N9    NUM_AST
        GEN_FN   GEN_ALT  GEN_GUI  GEN_CTRL NAV_TAB        NUM_EQUL NUM_N4    NUM_N5    NUM_N6    NUM_N0
        MED_UNDO MED_CUT  MED_COPY NUM_PST  NUM_STAB       NUM_MIN  NUM_N1    NUM_N2    NUM_N3    NUM_FSLH
                                   GEN_TRAN DEF_SHFT       DEF_SHFT GEN_TRAN
      >;
    };

    media_layer {
      bindings = <
        MED_STOP MED_VOLD MED_MUTE MED_VOLU MED_BRIU       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
        MED_PRNT MED_PREV MED_PLAY MED_NEXT MED_BRID       GEN_TRAN GEN_CTRL GEN_GUI  GEN_ALT  GEN_MED
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
                                   GEN_TRAN DEF_SHFT       DEF_SHFT GEN_TRAN
      >;
    };

    function_layer {
      bindings = <
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN FUN_F7   FUN_F8   FUN_F9   FUN_F10
        GEN_FN   GEN_ALT  GEN_MED  GEN_CTRL GEN_TRAN       FUN_GAME FUN_F4   FUN_F5   FUN_F6   FUN_F11
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN FUN_F1   FUN_F2   FUN_F3   FUN_F13
                                   GEN_TRAN DEF_SHFT       DEF_SHFT GEN_TRAN
      >;
    };

    gaming_layer {
      bindings = <
        GAM_TAB  GAM_Q    GAM_W    GAM_E    GAM_R          GEN_NONE GEN_NONE GAM_UP   GEN_NONE GEN_NONE
        GAM_LSFT GAM_A    GAM_S    GAM_D    GAM_F          GAM_DEF  GAM_LEFT GAM_DOWN GAM_RGHT GEN_NONE
        GAM_LCTL GAM_Z    GAM_X    GAM_C    GAM_V          GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE
                                   GEN_TRAN GAM_SPC        GEN_TRAN GEN_TRAN
      >;
    };

    system_layer {
      bindings = <
        GEN_TRAN SYS_BTPR SYS_BTCL SYS_BTNX SYS_BLE        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
        SYS_BOOT SYS_BT3  SYS_BT4  GEN_TRAN SYS_OTG        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
        GEN_TRAN SYS_BT0  SYS_BT1  SYS_BT2  SYS_USB        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
                                   GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
      >;
    };

    // empty_layer {
    //   bindings = <
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //                                GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
    //   >;
    // };

  };
};
