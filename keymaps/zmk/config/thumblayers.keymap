/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// GENERAL KEYS
#define GEN_NONE &none
#define GEN_TRAN &trans

// DEFAULT LAYER

#define L_DEF 0

#define DEF_Q &kp Q
#define DEF_W &kp W
#define DEF_F &kp F
#define DEF_P &kp P
#define DEF_B &kp B
                        
#define DEF_A &kp A 
#define DEF_R &lht LALT R 
#define DEF_S &lht LGUI S
#define DEF_T &lht LCTL T 
#define DEF_G &kp G
        
#define DEF_Z &kp Z
#define DEF_X &kp X
#define DEF_C &kp C
#define DEF_D &kp D
#define DEF_V &kp V


#define DEF_J &kp J
#define DEF_L &kp L
#define DEF_U &kp U
#define DEF_Y &kp Y
#define DEF_SEMI &kp SEMI

#define DEF_K &kp K
#define DEF_H &kp H
#define DEF_COMA &kp COMMA
#define DEF_DOT &kp DOT
#define DEF_QUOT &kp SQT

#define DEF_M &kp M
#define DEF_N &rht RCTL N
#define DEF_E &rht RGUI E
#define DEF_I &rht LALT I 
#define DEF_O &kp O

#define DEF_SHFT &sk LSHIFT
#define DEF_SPC &kp SPC
#define DEF_NAV &sl L_NAV
#define DEF_MED &sl L_MED

// NAVIGATION LAYER
#define L_NAV 1

#define NAV_BSLH &kp BSLH
#define NAV_HOME &kp HOME
#define NAV_UP &kp UP
#define NAV_END &kp END
#define NAV_PGUP &kp PG_UP


#define NAV_BSPC &kp BSPC
#define NAV_LEFT &mt LALT LEFT
#define NAV_DOWN &mt LGUI DOWN
#define NAV_RGHT &mt LCTL RIGHT
#define NAV_TAB &kp TAB

#define NAV_GRV &kp GRAVE
#define NAV_DEL &kp DEL
#define NAV_ESC &kp ESC
#define NAV_RET &kp RET
#define NAV_PGDN &kp PG_DN

#define NAV_LBKT &kp LBKT
#define NAV_N7 &kp N7 
#define NAV_N8 &kp N8
#define NAV_N9 &kp N9
#define NAV_RBKT &kp RBKT 

#define NAV_EQUL &kp EQUAL
#define NAV_N4 &mt RCTL N4
#define NAV_N5 &mt RGUI N5
#define NAV_N6 &mt RALT N6
#define NAV_N0 &kp N0

#define NAV_MIN &kp MINUS
#define NAV_N1 &kp N1
#define NAV_N2 &kp N2
#define NAV_N3 &kp N3
#define NAV_FSLH &kp FSLH

// MEDIA LAYER
#define L_MED 2

#define MED_BRID &kp C_BRI_DN
#define MED_VOLU &kp C_VOL_UP
#define MED_BRIU &kp C_BRI_UP


#define MED_PRNT &kp PSCRN
#define MED_PREV &lht LALT C_PREV
#define MED_PLAY &lht LGUI K_PP
#define MED_NEXT &lht LCTL C_NEXT

#define MED_MUTE &kp C_MUTE
#define MED_VOLD &kp C_VOL_DN
#define MED_STOP &kp C_STOP


#define MED_BCLR &bt BT_CLR
#define MED_F7 &kp F7
#define MED_F8 &kp F8
#define MED_F9 &kp F9
#define MED_F10 &kp F10

#define MED_GAME &to L_GAM
#define MED_F4 &kp F4
#define MED_F5 &kp F5
#define MED_F6 &kp F6
#define MED_F11 &kp F11

#define MED_BOOT &bootloader
#define MED_F1 &kp F1
#define MED_F2 &kp F2
#define MED_F3 &kp F3
#define MED_F13 &kp F12

// GAMING LAYER
#define L_GAM 3

#define GAM_TAB &kp TAB
#define GAM_Q &kp Q
#define GAM_W &kp W
#define GAM_E &kp E
#define GAM_R &kp R

#define GAM_LSFT &kp LSHIFT
#define GAM_A &kp A
#define GAM_S &kp S
#define GAM_D &kp D
#define GAM_F &kp F

#define GAM_LCTL &kp LCTRL
#define GAM_Z &kp Z
#define GAM_X &kp X
#define GAM_C &kp C
#define GAM_V &kp V


#define GAM_UP &kp UP

#define GAM_DEF &to L_DEF
#define GAM_LEFT &kp LEFT
#define GAM_DOWN &kp DOWN
#define GAM_RGHT &kp RIGHT

#define GAM_ESC &kp ESC
#define GAM_SPC &kp SPACE

&sk {
    release-after-ms = <500>;
    quick-release;
};
&sl {
    release-after-ms = <500>;
};

&mt {
  flavor = "tap-preferred";
  tapping_term_ms = <200>;
};

&lt {
  flavor = "tap-preferred";
  tapping_term_ms = <200>;
};

/ {
  behaviors {
    lht: left_hand_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        tapping-term-ms = <200>; 
        quick-tap-ms = <0>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
    };
    rht: right_hand_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "RIGHT_POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <0>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
    };
  };
  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        DEF_Q    DEF_W    DEF_F    DEF_P    DEF_B          DEF_J    DEF_L    DEF_U    DEF_Y    DEF_SEMI
        DEF_A    DEF_R    DEF_S    DEF_T    DEF_G          DEF_M    DEF_N    DEF_E    DEF_I    DEF_O
        DEF_Z    DEF_X    DEF_C    DEF_D    DEF_V          DEF_K    DEF_H    DEF_COMA DEF_DOT  DEF_QUOT
                                   DEF_SHFT DEF_SPC        DEF_NAV  DEF_MED
      >;
    };

    navigation_layer {
      bindings = <
        NAV_BSLH NAV_HOME NAV_UP   NAV_END  NAV_PGUP       NAV_LBKT NAV_N7    NAV_N8    NAV_N9    NAV_RBKT
        NAV_BSPC NAV_LEFT NAV_DOWN NAV_RGHT NAV_TAB        NAV_EQUL NAV_N4    NAV_N5    NAV_N6    NAV_N0
        NAV_GRV  NAV_DEL  NAV_ESC  NAV_RET  NAV_PGDN       NAV_MIN  NAV_N1    NAV_N2    NAV_N3    NAV_FSLH
                                   GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
      >;
    };

    media_layer {
      bindings = <
        GEN_TRAN MED_BRID MED_VOLU MED_BRIU GEN_TRAN       MED_BCLR MED_F7   MED_F8   MED_F9   MED_F10
        MED_PRNT MED_PREV MED_PLAY MED_NEXT GEN_TRAN       MED_GAME MED_F4   MED_F5   MED_F6   MED_F11
        GEN_TRAN MED_MUTE MED_VOLD MED_STOP GEN_TRAN       MED_BOOT MED_F1   MED_F2   MED_F3   MED_F13
                                   GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
      >;
    };


    gaming_layer {
      bindings = <
        GAM_TAB  GAM_Q    GAM_W    GAM_E    GAM_R       GEN_NONE GEN_NONE GAM_UP   GEN_NONE GEN_NONE
        GAM_LSFT GAM_A    GAM_S    GAM_D    GAM_F       GAM_DEF  GAM_LEFT GAM_DOWN GAM_RGHT GEN_NONE
        GAM_LCTL GAM_Z    GAM_X    GAM_C    GAM_V       GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE
                                   GEN_TRAN GAM_SPC     GEN_TRAN GEN_TRAN
      >;
    };

    // empty_layer {
    //   bindings = <
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //                                GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
    //   >;
    // };

  };
};
