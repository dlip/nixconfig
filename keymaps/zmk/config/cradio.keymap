/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// GENERAL KEYS
#define GEN_NONE &none
#define GEN_TRAN &trans

// DEFAULT LAYER

#define L_DEF 0

#define DEF_Q    &kp Q
#define DEF_W    &kp W
#define DEF_F    &kp F
#define DEF_P    &kp P
#define DEF_B    &kp B
                        
#define DEF_A    &kp A 
#define DEF_R    &kp R 
#define DEF_S    &kp S
#define DEF_T    &kp T 
#define DEF_G    &kp G
        
#define DEF_Z    &kp Z
#define DEF_X    &kp X
#define DEF_C    &kp C
#define DEF_D    &kp D
#define DEF_V    &kp V
                        

#define DEF_J    &kp J
#define DEF_L    &kp L
#define DEF_U    &kp U
#define DEF_Y    &kp Y
#define DEF_SEMI &kp SEMI

#define DEF_K    &kp K
#define DEF_H    &kp H
#define DEF_COMA &kp COMMA
#define DEF_DOT  &kp DOT
#define DEF_QUOT &kp SQT

#define DEF_M    &kp M
#define DEF_N    &kp N
#define DEF_E    &kp E
#define DEF_I    &kp I 
#define DEF_O    &kp O

#define DEF_NAV  &sl L_NAV
#define DEF_SPC  &kp SPC
#define DEF_SHFT &sk LSHIFT
#define DEF_BSPC &kp BSPC

#define GEN_SHFT &sk LSHIFT
// NAVIGATION LAYER
#define L_NAV 1

#define NAV_SYM &sl L_SYM
#define NAV_MED &sl L_MED

#define NAV_LGUI &sk LGUI
#define NAV_LALT &sk LALT
#define NAV_LCTL &sk LCTL
#define NAV_NUM &sl L_NUM
#define NAV_FUN &sl L_FUN

#define NUM_UNDO &kp LC(Z)
#define NUM_CUT  &kp LC(X)
#define NUM_COPY &kp LC(C)
#define NAV_TAB  &kp TAB
#define NUM_PST  &kp LC(V)


#define NAV_PGUP &kp PG_UP
#define NAV_HOME &kp HOME
#define NAV_UP   &kp UP
#define NAV_END  &kp END

#define NAV_PGDN &kp PG_DN
#define NAV_LEFT &kp LEFT
#define NAV_DOWN &kp DOWN
#define NAV_RGHT &kp RIGHT
#define NAV_RET  &kp RET

#define NAV_ESC  &kp ESC
#define NAV_BSPC &kp BSPC
#define NAV_DEL  &kp DEL

// NUMBER LAYER
#define L_NUM 2

#define NUM_PLUS &kp PLUS
#define NUM_N7   &kp N7 
#define NUM_N8   &kp N8
#define NUM_N9   &kp N9
#define NUM_AST  &kp ASTERISK 

#define NUM_EQUL &kp EQUAL
#define NUM_N4   &mt LCTRL N4
#define NUM_N5   &mt LGUI N5
#define NUM_N6   &mt LALT N6
#define NUM_N0   &kp N0

#define NUM_MIN  &kp MINUS
#define NUM_N1   &kp N1
#define NUM_N2   &kp N2
#define NUM_N3   &kp N3
#define NUM_FSLH &kp FSLH

// SYMBOL LAYER

#define L_SYM 3
// ()_{}&?[]!\#|@%^$`~

#define SYM_HASH &kp HASH
#define SYM_PIPE &kp PIPE
#define SYM_TLDE &kp TILDE
#define SYM_LBKT &kp LBKT
#define SYM_RBKT &kp RBKT

#define SYM_GRV  &kp GRAVE
#define SYM_QUES &kp EXCLAMATION
#define SYM_UNDR &kp UNDER
#define SYM_LPAR &kp LPAR
#define SYM_RPAR &kp RPAR

#define SYM_BSLH &kp BSLH
#define SYM_EXCL &kp QUESTION
#define SYM_AND  &kp AMPERSAND
#define SYM_LBRC &kp LBRC
#define SYM_RBRC &kp RBRC

// MEDIA LAYER
#define L_MED 4

#define MED_BRID &kp C_BRI_DN
#define MED_VOLU &kp C_VOL_UP
#define MED_BRIU &kp C_BRI_UP


#define MED_PRNT &kp PSCRN
#define MED_PREV &kp C_PREV
#define MED_PLAY &kp K_PP
#define MED_NEXT &kp C_NEXT

#define MED_MUTE &kp C_MUTE
#define MED_VOLD &kp C_VOL_DN
#define MED_STOP &kp C_STOP

// FUNCTION LAYER
#define L_FUN 5
#define FUN_F7   &kp F7
#define FUN_F8   &kp F8
#define FUN_F9   &kp F9
#define FUN_F10  &kp F10

#define FUN_GAME &to L_GAM
#define FUN_F4   &mt LCTRL F4
#define FUN_F5   &mt LGUI F5
#define FUN_F6   &mt LALT F6
#define FUN_F11  &kp F11

#define FUN_BOOT &bootloader
#define FUN_F1   &kp F1
#define FUN_F2   &kp F2
#define FUN_F3   &kp F3
#define FUN_F13  &kp F12

// GAMING LAYER
#define L_GAM 6

#define GAM_TAB  &kp TAB
#define GAM_Q    &kp Q
#define GAM_W    &kp W
#define GAM_E    &kp E
#define GAM_R    &kp R

#define GAM_LSFT &kp LSHIFT
#define GAM_A    &kp A
#define GAM_S    &kp S
#define GAM_D    &kp D
#define GAM_F    &kp F

#define GAM_LCTL &kp LCTRL
#define GAM_Z    &kp Z
#define GAM_X    &kp X
#define GAM_C    &kp C
#define GAM_V    &kp V


#define GAM_UP   &kp UP

#define GAM_DEF  &to L_DEF
#define GAM_LEFT &kp LEFT
#define GAM_DOWN &kp DOWN
#define GAM_RGHT &kp RIGHT

#define GAM_ESC  &kp ESC
#define GAM_SPC  &kp SPACE


&sk {
    release-after-ms = <1000>;
    quick-release;
};
&sl {
    release-after-ms = <1000>;
};


/ {
  combos {
    compatible = "zmk,combos";

    combo_bootloader {
      timeout-ms = <50>;
      key-positions = <0 20>;
      bindings = <&bootloader>;
    };

    combo_btclr {
      timeout-ms = <50>;
      key-positions = <2 22>;
      bindings = <&bt BT_CLR>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        DEF_Q    DEF_W    DEF_F    DEF_P    DEF_B          DEF_J    DEF_L    DEF_U    DEF_Y    DEF_SEMI
        DEF_A    DEF_R    DEF_S    DEF_T    DEF_G          DEF_M    DEF_N    DEF_E    DEF_I    DEF_O
        DEF_Z    DEF_X    DEF_C    DEF_D    DEF_V          DEF_K    DEF_H    DEF_COMA DEF_DOT  DEF_QUOT
                                   DEF_NAV  DEF_SPC        DEF_SHFT DEF_BSPC
      >;
    };

    navigation_layer {
      bindings = <
        NAV_ESC  GEN_TRAN NAV_MED  NAV_SYM  NAV_MED        NAV_PGUP NAV_HOME NAV_UP   NAV_END  GEN_TRAN
        NAV_LGUI NAV_LALT NAV_LCTL NAV_NUM  NAV_FUN        NAV_PGDN NAV_LEFT NAV_DOWN NAV_RGHT NAV_RET
        NUM_UNDO NUM_CUT  NUM_COPY NAV_TAB  NUM_PST        GEN_TRAN NAV_ESC  NAV_BSPC NAV_DEL  GEN_TRAN
                                   GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
      >;
    };
    
    number_layer {
      bindings = <
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       NUM_PLUS NUM_N7   NUM_N8   NUM_N9   NUM_AST
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       NUM_EQUL NUM_N4   NUM_N5   NUM_N6   NUM_N0
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       NUM_MIN  NUM_N1   NUM_N2   NUM_N3   NUM_FSLH
                                   GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN 
      >;
    };

    symbol_layer {
      bindings = <
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       SYM_RBKT SYM_LBKT  SYM_TLDE SYM_PIPE SYM_HASH
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       SYM_RPAR SYM_LPAR  SYM_UNDR SYM_QUES SYM_GRV 
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       SYM_RBRC SYM_LBRC  SYM_AND  SYM_EXCL SYM_BSLH
                                   GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN 
      >;
    };
    media_layer {
      bindings = <
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN MED_BRID MED_VOLU MED_BRIU GEN_TRAN
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN MED_PREV MED_PLAY MED_NEXT MED_PRNT
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN MED_MUTE MED_VOLD MED_STOP GEN_TRAN
                                   GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
      >;
    };
    function_layer {
      bindings = <
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN FUN_F7   FUN_F8   FUN_F9   FUN_F10
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       FUN_GAME FUN_F4   FUN_F5   FUN_F6   FUN_F11
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN FUN_F1   FUN_F2   FUN_F3   FUN_F13
                                   GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
      >;
    };
    gaming_layer {
      bindings = <
        GAM_TAB  GAM_Q    GAM_W    GAM_E    GAM_R          GEN_NONE GEN_NONE GAM_UP   GEN_NONE GEN_NONE
        GAM_LSFT GAM_A    GAM_S    GAM_D    GAM_F          GAM_DEF  GAM_LEFT GAM_DOWN GAM_RGHT GEN_NONE
        GAM_LCTL GAM_Z    GAM_X    GAM_C    GAM_V          GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE
                                   GEN_TRAN GAM_SPC        GEN_TRAN GEN_TRAN
      >;
    };

    // empty_layer {
    //   bindings = <
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //                                GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
    //   >;
    // };

  };
};
