/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// GENERAL KEYS
#define GEN_NONE &none
#define GEN_TRAN &trans

#define GEN_CTRL &kp LCTRL
#define GEN_ALT &kp LALT
#define GEN_GUI &kp LGUI
#define GEN_FN &mo L_FUN
#define GEN_MED &mo L_MED

// DEFAULT LAYER

#define L_DEF 0

#define DEF_Q &kp Q
#define DEF_W &kp W
#define DEF_F &kp F
#define DEF_P &kp P
#define DEF_B &kp B
                        
#define DEF_A &lt L_FUN A 
#define DEF_R &mt LALT R 
#define DEF_S &mt LGUI S
#define DEF_T &mt LCTRL T 
#define DEF_G &kp G
        
#define DEF_Z &kp Z
#define DEF_X &kp X
#define DEF_C &kp C
#define DEF_D &kp D
#define DEF_V &kp V
                        

#define DEF_J &kp J
#define DEF_L &kp L
#define DEF_U &kp U
#define DEF_Y &kp Y
#define DEF_SEMI &kp SEMI

#define DEF_K &kp K
#define DEF_H &kp H
#define DEF_COMA &kp COMMA
#define DEF_DOT &kp DOT
#define DEF_QUOT &kp SQT

#define DEF_M &kp M
#define DEF_N &mt LCTRL N
#define DEF_E &mt RGUI E
#define DEF_I &mt LALT I 
#define DEF_O &lt L_MED O

#define DEF_SPC  &kp SPC
#define DEF_NAV  &mo L_NAV
#define DEF_NUM  &mo L_NUM
#define DEF_SHFT &sk LSHIFT

// NAVIGATION LAYER
#define L_NAV 1

#define NAV_CAPS &kp CAPS
#define NAV_BSLH &kp BSLH
#define NAV_PIPE &kp PIPE
#define NAV_HOME &kp HOME
#define NAV_UP &kp UP
#define NAV_END &kp END
#define NAV_PGUP &kp PG_UP

#define NAV_ESC &kp ESC
#define NAV_LEFT &kp LEFT
#define NAV_DOWN &kp DOWN
#define NAV_RGHT &kp RIGHT
#define NAV_TAB &kp TAB

#define NAV_GRV &kp GRAVE
#define NAV_TILD &kp TILDE
#define NAV_DEL &kp DEL
#define NAV_BSPC &kp BSPC
#define NAV_RET &kp RET
#define NAV_PGDN &kp PG_DN

// NUM LAYER
#define L_NUM 2

#define NUM_LBKT &kp LBKT
#define NUM_LBRC &kp LBRC
#define NUM_N7 &kp N7 
#define NUM_N8 &kp N8
#define NUM_N9 &kp N9
#define NUM_RBKT &kp RBKT 
#define NUM_RBRC &kp RBRC

#define NUM_EQUL &kp EQUAL
#define NUM_PLUS &kp PLUS
#define NUM_AST  &kp ASTERISK 

#define NUM_N4 &kp N4
#define NUM_N5 &kp N5
#define NUM_N6 &kp N6
#define NUM_N0 &kp N0

#define NUM_MIN &kp MINUS
#define NUM_N1 &kp N1
#define NUM_N2 &kp N2
#define NUM_N3 &kp N3
#define NUM_FSLH &kp FSLH

// MEDIA LAYER
#define L_MED 3

#define MED_BRID &kp C_BRI_DN
#define MED_VOLU &kp C_VOL_UP
#define MED_BRIU &kp C_BRI_UP


#define MED_PRNT &kp PSCRN
#define MED_PREV &kp C_PREV
#define MED_PLAY &kp C_PP
#define MED_NEXT &kp C_NEXT

#define MED_MUTE &kp C_MUTE
#define MED_VOLD &kp C_VOL_DN
#define MED_STOP &kp C_STOP

#define MED_UNDO &kp LC(Z)
#define MED_CUT  &kp LC(X)
#define MED_COPY &kp LC(C)
#define NUM_PST  &kp LC(V)
#define NUM_STAB &kp LS(TAB)

//FUNCTION LAYER
#define L_FUN 4

#define FUN_F7 &kp F7
#define FUN_F8 &kp F8
#define FUN_F9 &kp F9
#define FUN_F10 &kp F10

#define FUN_GAME &to L_GAM
#define FUN_F4 &kp F4
#define FUN_F5 &kp F5
#define FUN_F6 &kp F6
#define FUN_F11 &kp F11

#define FUN_BOOT &bootloader
#define FUN_F1 &kp F1
#define FUN_F2 &kp F2
#define FUN_F3 &kp F3
#define FUN_F13 &kp F12

#define FUN_SPC &kp LC(SPC)

// GAMING LAYER
#define L_GAM 5

#define GAM_TAB &kp TAB
#define GAM_Q &kp Q
#define GAM_W &kp W
#define GAM_E &kp E
#define GAM_R &kp R

#define GAM_LSFT &kp LSHIFT
#define GAM_A &kp A
#define GAM_S &kp S
#define GAM_D &kp D
#define GAM_F &kp F

#define GAM_LCTL &kp LCTRL
#define GAM_Z &kp Z
#define GAM_X &kp X
#define GAM_C &kp C
#define GAM_V &kp V


#define GAM_UP &kp UP

#define GAM_DEF &to L_DEF
#define GAM_LEFT &kp LEFT
#define GAM_DOWN &kp DOWN
#define GAM_RGHT &kp RIGHT

#define GAM_ESC &kp ESC
#define GAM_SPC &kp SPACE

// SYSTEM LAYER
#define L_SYS 6

#define SYS_BOOT &bootloader
#define SYS_BTCL &bt BT_CLR
#define SYS_BTNX &bt BT_NXT
#define SYS_BTPR &bt BT_PRV
#define SYS_BLE &out OUT_BLE
#define SYS_USB &out OUT_USB
#define SYS_OTG &out OUT_TOG
#define SYS_BT0 &bt BT_SEL 0
#define SYS_BT1 &bt BT_SEL 1
#define SYS_BT2 &bt BT_SEL 2
#define SYS_BT3 &bt BT_SEL 3
#define SYS_BT4 &bt BT_SEL 4

// POSITIONS
#define P_Q 0
#define P_W 1
#define P_F 2
#define P_P 3
#define P_B 4
#define P_J 5
#define P_L 6
#define P_U 7
#define P_Y 8
#define P_SEMI 9
#define P_A 10
#define P_R 11
#define P_S 12
#define P_T 13
#define P_G 14
#define P_M 15
#define P_N 16
#define P_E 17
#define P_I 18
#define P_O 19
#define P_Z 20
#define P_X 21
#define P_C 22
#define P_D 23
#define P_V 24
#define P_K 25
#define P_H 26
#define P_COMMA 27
#define P_DOT 28
#define P_SQT 29
#define P_COMBO 31 32

#define P_LALT 30
#define P_SPC 31
#define P_SHFT 32
#define P_RALT 33

#define COMBO_TIMEOUT 25
#define MACRO_TAP 10
#define MACRO_WAIT 0

&mt {
  flavor = "tap-preferred";
  tapping_term_ms = <200>;
};

&lt {
  flavor = "tap-preferred";
  tapping_term_ms = <200>;
};
&sl {
    release-after-ms = <1000>;
};
&sk {
    release-after-ms = <1000>;
    quick-release;
};
/ {
  macros {
    // MACROS START
    ZMK_MACRO(spm_the,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_the,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_and,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_and,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_you,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Y &kp O &kp U &kp SPACE>;
    )
    ZMK_MACRO(dm_you,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Y &kp O &kp U &kp DOT>;
    )
    ZMK_MACRO(spm_that,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp A &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_that,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp A &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_was,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp S &kp SPACE>;
    )
    ZMK_MACRO(dm_was,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp S &kp DOT>;
    )
    ZMK_MACRO(spm_for,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_for,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_are,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_are,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp R &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_with,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp I &kp T &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_with,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp I &kp T &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_his,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp I &kp S &kp SPACE>;
    )
    ZMK_MACRO(dm_his,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp I &kp S &kp DOT>;
    )
    ZMK_MACRO(spm_they,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_they,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_one,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp N &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_one,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp N &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_have,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_have,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp V &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_this,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp I &kp S &kp SPACE>;
    )
    ZMK_MACRO(dm_this,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp I &kp S &kp DOT>;
    )
    ZMK_MACRO(spm_from,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp R &kp O &kp M &kp SPACE>;
    )
    ZMK_MACRO(dm_from,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp R &kp O &kp M &kp DOT>;
    )
    ZMK_MACRO(spm_had,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_had,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_hot,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_hot,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_but,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_but,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp U &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_some,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp O &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_some,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp O &kp M &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_what,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp A &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_what,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp A &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_there,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_there,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp R &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_can,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_can,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_out,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_out,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp U &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_other,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp T &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_other,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp T &kp H &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_were,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp E &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_were,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp E &kp R &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_all,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_all,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp L &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_your,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Y &kp O &kp U &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_your,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Y &kp O &kp U &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_when,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_when,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp E &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_use,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp U &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_use,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp U &kp S &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_word,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp R &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_word,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp R &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_how,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(dm_how,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp W &kp DOT>;
    )
    ZMK_MACRO(spm_said,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp A &kp I &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_said,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp A &kp I &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_each,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_each,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp C &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_she,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp H &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_she,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp H &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_which,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp I &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_which,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp I &kp C &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_their,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp I &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_their,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp I &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_time,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp I &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_time,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp I &kp M &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_will,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp I &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_will,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp I &kp L &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_way,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_way,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_about,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp B &kp O &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_about,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp B &kp O &kp U &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_many,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp N &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_many,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp N &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_then,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_then,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_them,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp M &kp SPACE>;
    )
    ZMK_MACRO(dm_them,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp M &kp DOT>;
    )
    ZMK_MACRO(spm_would,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp U &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_would,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp U &kp L &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_write,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp R &kp I &kp T &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_write,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp R &kp I &kp T &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_like,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp K &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_like,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp K &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_these,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_these,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp E &kp S &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_her,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_her,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_long,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp O &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(dm_long,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp O &kp N &kp G &kp DOT>;
    )
    ZMK_MACRO(spm_make,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp K &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_make,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp K &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_thing,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp I &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(dm_thing,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp I &kp N &kp G &kp DOT>;
    )
    ZMK_MACRO(spm_see,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_see,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_him,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp I &kp M &kp SPACE>;
    )
    ZMK_MACRO(dm_him,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp I &kp M &kp DOT>;
    )
    ZMK_MACRO(spm_two,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp W &kp O &kp SPACE>;
    )
    ZMK_MACRO(dm_two,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp W &kp O &kp DOT>;
    )
    ZMK_MACRO(spm_has,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp S &kp SPACE>;
    )
    ZMK_MACRO(dm_has,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp S &kp DOT>;
    )
    ZMK_MACRO(spm_look,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp O &kp O &kp K &kp SPACE>;
    )
    ZMK_MACRO(dm_look,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp O &kp O &kp K &kp DOT>;
    )
    ZMK_MACRO(spm_more,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_more,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp R &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_day,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_day,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp A &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_could,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp U &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_could,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp U &kp L &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_come,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_come,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp M &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_did,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp I &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_did,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp I &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_sound,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp O &kp U &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_sound,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp O &kp U &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_most,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_most,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp S &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_number,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp U &kp M &kp B &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_number,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp U &kp M &kp B &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_who,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp O &kp SPACE>;
    )
    ZMK_MACRO(dm_who,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp O &kp DOT>;
    )
    ZMK_MACRO(spm_over,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_over,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp V &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_know,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp N &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(dm_know,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp N &kp O &kp W &kp DOT>;
    )
    ZMK_MACRO(spm_water,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp T &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_water,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp T &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_than,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_than,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp A &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_call,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_call,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp L &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_first,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp I &kp R &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_first,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp I &kp R &kp S &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_people,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp E &kp O &kp P &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_people,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp E &kp O &kp P &kp L &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_may,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_may,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_down,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp W &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_down,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp W &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_side,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp I &kp D &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_side,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp I &kp D &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_been,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_been,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp E &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_now,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(dm_now,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp O &kp W &kp DOT>;
    )
    ZMK_MACRO(spm_find,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp I &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_find,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp I &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_any,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp N &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_any,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp N &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_new,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp W &kp SPACE>;
    )
    ZMK_MACRO(dm_new,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp W &kp DOT>;
    )
    ZMK_MACRO(spm_work,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp R &kp K &kp SPACE>;
    )
    ZMK_MACRO(dm_work,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp R &kp K &kp DOT>;
    )
    ZMK_MACRO(spm_part,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp A &kp R &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_part,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp A &kp R &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_take,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp A &kp K &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_take,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp A &kp K &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_get,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp E &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_get,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp E &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_place,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp L &kp A &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_place,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp L &kp A &kp C &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_made,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp D &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_made,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp D &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_live,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_live,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp V &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_where,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp E &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_where,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp E &kp R &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_after,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp F &kp T &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_after,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp F &kp T &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_back,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp A &kp C &kp K &kp SPACE>;
    )
    ZMK_MACRO(dm_back,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp A &kp C &kp K &kp DOT>;
    )
    ZMK_MACRO(spm_little,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp T &kp T &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_little,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp T &kp T &kp L &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_only,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp N &kp L &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_only,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp N &kp L &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_round,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp O &kp U &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_round,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp O &kp U &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_man,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_man,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_year,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Y &kp E &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_year,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Y &kp E &kp A &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_came,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_came,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp M &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_show,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp H &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(dm_show,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp H &kp O &kp W &kp DOT>;
    )
    ZMK_MACRO(spm_every,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp V &kp E &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_every,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp V &kp E &kp R &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_good,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp O &kp O &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_good,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp O &kp O &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_give,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp I &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_give,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp I &kp V &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_our,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp U &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_our,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp U &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_under,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp U &kp N &kp D &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_under,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp U &kp N &kp D &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_name,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp A &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_name,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp A &kp M &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_very,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp V &kp E &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_very,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp V &kp E &kp R &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_through,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp R &kp O &kp U &kp G &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_through,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp R &kp O &kp U &kp G &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_just,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp J &kp U &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_just,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp J &kp U &kp S &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_form,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp R &kp M &kp SPACE>;
    )
    ZMK_MACRO(dm_form,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp R &kp M &kp DOT>;
    )
    ZMK_MACRO(spm_much,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp U &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_much,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp U &kp C &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_great,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp R &kp E &kp A &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_great,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp R &kp E &kp A &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_think,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp I &kp N &kp K &kp SPACE>;
    )
    ZMK_MACRO(dm_think,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp I &kp N &kp K &kp DOT>;
    )
    ZMK_MACRO(spm_say,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_say,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp A &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_help,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp L &kp P &kp SPACE>;
    )
    ZMK_MACRO(dm_help,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp L &kp P &kp DOT>;
    )
    ZMK_MACRO(spm_low,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(dm_low,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp O &kp W &kp DOT>;
    )
    ZMK_MACRO(spm_line,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp N &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_line,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp N &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_before,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp F &kp O &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_before,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp F &kp O &kp R &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_turn,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp U &kp R &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_turn,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp U &kp R &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_cause,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp U &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_cause,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp U &kp S &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_same,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp A &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_same,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp A &kp M &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_mean,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp E &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_mean,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp E &kp A &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_differ,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp I &kp F &kp F &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_differ,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp I &kp F &kp F &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_move,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_move,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp V &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_right,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp I &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_right,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp I &kp G &kp H &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_boy,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_boy,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_old,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_old,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp L &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_too,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp O &kp O &kp SPACE>;
    )
    ZMK_MACRO(dm_too,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp O &kp O &kp DOT>;
    )
    ZMK_MACRO(spm_does,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp E &kp S &kp SPACE>;
    )
    ZMK_MACRO(dm_does,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp E &kp S &kp DOT>;
    )
    ZMK_MACRO(spm_tell,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp E &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_tell,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp E &kp L &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_sentence,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp N &kp T &kp E &kp N &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_sentence,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp N &kp T &kp E &kp N &kp C &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_set,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_set,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_three,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp R &kp E &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_three,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp R &kp E &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_want,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp N &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_want,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp N &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_air,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp I &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_air,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp I &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_well,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp E &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_well,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp E &kp L &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_also,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp L &kp S &kp O &kp SPACE>;
    )
    ZMK_MACRO(dm_also,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp L &kp S &kp O &kp DOT>;
    )
    ZMK_MACRO(spm_play,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp L &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_play,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp L &kp A &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_small,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp M &kp A &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_small,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp M &kp A &kp L &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_end,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_end,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_put,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_put,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp U &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_home,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp M &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_home,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp M &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_read,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp E &kp A &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_read,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp E &kp A &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_hand,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_hand,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_port,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp O &kp R &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_port,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp O &kp R &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_large,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp R &kp G &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_large,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp R &kp G &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_spell,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp P &kp E &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_spell,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp P &kp E &kp L &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_add,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp D &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_add,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp D &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_even,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp V &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_even,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp V &kp E &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_land,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_land,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_here,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_here,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp R &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_must,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp U &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_must,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp U &kp S &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_big,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp I &kp G &kp SPACE>;
    )
    ZMK_MACRO(dm_big,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp I &kp G &kp DOT>;
    )
    ZMK_MACRO(spm_high,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp I &kp G &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_high,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp I &kp G &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_such,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp U &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_such,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp U &kp C &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_follow,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp L &kp L &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(dm_follow,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp L &kp L &kp O &kp W &kp DOT>;
    )
    ZMK_MACRO(spm_act,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp C &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_act,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp C &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_why,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_why,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_ask,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp S &kp K &kp SPACE>;
    )
    ZMK_MACRO(dm_ask,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp S &kp K &kp DOT>;
    )
    ZMK_MACRO(spm_men,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_men,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp E &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_change,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp H &kp A &kp N &kp G &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_change,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp H &kp A &kp N &kp G &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_went,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp E &kp N &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_went,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp E &kp N &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_light,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_light,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp G &kp H &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_kind,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp I &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_kind,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp I &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_off,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp F &kp F &kp SPACE>;
    )
    ZMK_MACRO(dm_off,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp F &kp F &kp DOT>;
    )
    ZMK_MACRO(spm_need,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp E &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_need,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp E &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_house,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp U &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_house,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp U &kp S &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_picture,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp I &kp C &kp T &kp U &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_picture,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp I &kp C &kp T &kp U &kp R &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_try,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_try,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp R &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_again,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp G &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_again,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp G &kp A &kp I &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_animal,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp N &kp I &kp M &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_animal,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp N &kp I &kp M &kp A &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_point,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp O &kp I &kp N &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_point,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp O &kp I &kp N &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_mother,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp T &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_mother,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp T &kp H &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_world,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp R &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_world,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp R &kp L &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_near,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_near,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp A &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_build,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp U &kp I &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_build,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp U &kp I &kp L &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_self,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp L &kp F &kp SPACE>;
    )
    ZMK_MACRO(dm_self,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp L &kp F &kp DOT>;
    )
    ZMK_MACRO(spm_earth,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp R &kp T &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_earth,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp R &kp T &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_father,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp A &kp T &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_father,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp A &kp T &kp H &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_head,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp A &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_head,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp A &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_stand,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp A &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_stand,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp A &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_own,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp W &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_own,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp W &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_page,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp A &kp G &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_page,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp A &kp G &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_should,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp H &kp O &kp U &kp L &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_should,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp H &kp O &kp U &kp L &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_country,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp U &kp N &kp T &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_country,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp U &kp N &kp T &kp R &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_found,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp U &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_found,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp U &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_answer,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp N &kp S &kp W &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_answer,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp N &kp S &kp W &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_school,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp C &kp H &kp O &kp O &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_school,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp C &kp H &kp O &kp O &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_grow,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp R &kp O &kp W &kp SPACE>;
    )
    ZMK_MACRO(dm_grow,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp R &kp O &kp W &kp DOT>;
    )
    ZMK_MACRO(spm_study,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp U &kp D &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_study,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp U &kp D &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_still,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp I &kp L &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_still,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp I &kp L &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_learn,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp A &kp R &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_learn,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp A &kp R &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_plant,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp L &kp A &kp N &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_plant,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp L &kp A &kp N &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_cover,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_cover,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp V &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_food,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp O &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_food,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp O &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_sun,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp U &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_sun,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp U &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_four,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp U &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_four,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp O &kp U &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_thought,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp O &kp U &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_thought,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp O &kp U &kp G &kp H &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_let,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_let,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_keep,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp E &kp E &kp P &kp SPACE>;
    )
    ZMK_MACRO(dm_keep,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp E &kp E &kp P &kp DOT>;
    )
    ZMK_MACRO(spm_eye,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp Y &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_eye,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp Y &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_never,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_never,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp V &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_last,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_last,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp S &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_door,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp O &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_door,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp O &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_between,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp T &kp W &kp E &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_between,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp T &kp W &kp E &kp E &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_city,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp I &kp T &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_city,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp I &kp T &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_tree,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp R &kp E &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_tree,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp R &kp E &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_cross,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp R &kp O &kp S &kp S &kp SPACE>;
    )
    ZMK_MACRO(dm_cross,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp R &kp O &kp S &kp S &kp DOT>;
    )
    ZMK_MACRO(spm_since,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp I &kp N &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_since,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp I &kp N &kp C &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_hard,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp R &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_hard,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp R &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_start,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp A &kp R &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_start,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp A &kp R &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_might,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp I &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_might,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp I &kp G &kp H &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_story,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp O &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_story,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp O &kp R &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_saw,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp A &kp W &kp SPACE>;
    )
    ZMK_MACRO(dm_saw,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp A &kp W &kp DOT>;
    )
    ZMK_MACRO(spm_far,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_far,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp A &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_sea,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp A &kp SPACE>;
    )
    ZMK_MACRO(dm_sea,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp A &kp DOT>;
    )
    ZMK_MACRO(spm_draw,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp R &kp A &kp W &kp SPACE>;
    )
    ZMK_MACRO(dm_draw,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp R &kp A &kp W &kp DOT>;
    )
    ZMK_MACRO(spm_left,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp F &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_left,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp F &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_late,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp T &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_late,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp T &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_run,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp U &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_run,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp U &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_donSQTt,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp N &kp SQT &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_donSQTt,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp N &kp SQT &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_while,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp I &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_while,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp I &kp L &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_press,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp R &kp E &kp S &kp S &kp SPACE>;
    )
    ZMK_MACRO(dm_press,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp R &kp E &kp S &kp S &kp DOT>;
    )
    ZMK_MACRO(spm_close,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp L &kp O &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_close,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp L &kp O &kp S &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_night,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp I &kp G &kp H &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_night,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp I &kp G &kp H &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_real,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp E &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_real,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp E &kp A &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_life,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp F &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_life,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp F &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_few,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp E &kp W &kp SPACE>;
    )
    ZMK_MACRO(dm_few,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp E &kp W &kp DOT>;
    )
    ZMK_MACRO(spm_stop,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp O &kp P &kp SPACE>;
    )
    ZMK_MACRO(dm_stop,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp T &kp O &kp P &kp DOT>;
    )
    ZMK_MACRO(spm_open,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp P &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_open,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp P &kp E &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_seem,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp E &kp M &kp SPACE>;
    )
    ZMK_MACRO(dm_seem,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp E &kp M &kp DOT>;
    )
    ZMK_MACRO(spm_together,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp O &kp G &kp E &kp T &kp H &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_together,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp O &kp G &kp E &kp T &kp H &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_next,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp X &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_next,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp E &kp X &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_white,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp I &kp T &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_white,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp H &kp I &kp T &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_children,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp H &kp I &kp L &kp D &kp R &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_children,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp H &kp I &kp L &kp D &kp R &kp E &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_begin,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp G &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_begin,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp G &kp I &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_got,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp O &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_got,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp O &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_walk,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp L &kp K &kp SPACE>;
    )
    ZMK_MACRO(dm_walk,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp L &kp K &kp DOT>;
    )
    ZMK_MACRO(spm_example,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp X &kp A &kp M &kp P &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_example,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp X &kp A &kp M &kp P &kp L &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_ease,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_ease,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp S &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_paper,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp A &kp P &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_paper,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp A &kp P &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_often,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp F &kp T &kp E &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_often,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp F &kp T &kp E &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_always,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp L &kp W &kp A &kp Y &kp S &kp SPACE>;
    )
    ZMK_MACRO(dm_always,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp L &kp W &kp A &kp Y &kp S &kp DOT>;
    )
    ZMK_MACRO(spm_music,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp U &kp S &kp I &kp C &kp SPACE>;
    )
    ZMK_MACRO(dm_music,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp U &kp S &kp I &kp C &kp DOT>;
    )
    ZMK_MACRO(spm_those,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp O &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_those,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp O &kp S &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_both,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp T &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_both,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp T &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_mark,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp R &kp K &kp SPACE>;
    )
    ZMK_MACRO(dm_mark,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp R &kp K &kp DOT>;
    )
    ZMK_MACRO(spm_book,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp O &kp K &kp SPACE>;
    )
    ZMK_MACRO(dm_book,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp O &kp K &kp DOT>;
    )
    ZMK_MACRO(spm_letter,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp T &kp T &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_letter,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp T &kp T &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_until,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp U &kp N &kp T &kp I &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_until,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp U &kp N &kp T &kp I &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_mile,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp I &kp L &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_mile,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp I &kp L &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_river,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp I &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_river,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp I &kp V &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_car,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_car,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_feet,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp E &kp E &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_feet,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp E &kp E &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_care,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_care,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp R &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_second,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp C &kp O &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_second,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp C &kp O &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_group,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp R &kp O &kp U &kp P &kp SPACE>;
    )
    ZMK_MACRO(dm_group,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp R &kp O &kp U &kp P &kp DOT>;
    )
    ZMK_MACRO(spm_carry,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp R &kp R &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_carry,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp A &kp R &kp R &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_took,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp O &kp O &kp K &kp SPACE>;
    )
    ZMK_MACRO(dm_took,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp O &kp O &kp K &kp DOT>;
    )
    ZMK_MACRO(spm_rain,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_rain,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp A &kp I &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_eat,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_eat,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_room,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp O &kp O &kp M &kp SPACE>;
    )
    ZMK_MACRO(dm_room,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp O &kp O &kp M &kp DOT>;
    )
    ZMK_MACRO(spm_friend,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp R &kp I &kp E &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_friend,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp R &kp I &kp E &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_began,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp G &kp A &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_began,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp E &kp G &kp A &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_idea,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp I &kp D &kp E &kp A &kp SPACE>;
    )
    ZMK_MACRO(dm_idea,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp I &kp D &kp E &kp A &kp DOT>;
    )
    ZMK_MACRO(spm_fish,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp I &kp S &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_fish,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp I &kp S &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_mountain,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp U &kp N &kp T &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_mountain,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp U &kp N &kp T &kp A &kp I &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_north,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp O &kp R &kp T &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_north,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp O &kp R &kp T &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_once,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp N &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_once,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp O &kp N &kp C &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_base,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp A &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_base,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp A &kp S &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_hear,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp A &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_hear,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp E &kp A &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_horse,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp R &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_horse,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp O &kp R &kp S &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_cut,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp U &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_cut,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp U &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_sure,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp U &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_sure,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp U &kp R &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_watch,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp T &kp C &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_watch,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp A &kp T &kp C &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_color,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp L &kp O &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_color,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp C &kp O &kp L &kp O &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_face,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp A &kp C &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_face,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp A &kp C &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_wood,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp O &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_wood,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp O &kp O &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_main,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_main,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp A &kp I &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_enough,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp N &kp O &kp U &kp G &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_enough,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp N &kp O &kp U &kp G &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_plain,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp L &kp A &kp I &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_plain,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp L &kp A &kp I &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_girl,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp I &kp R &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_girl,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp G &kp I &kp R &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_usual,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp U &kp S &kp U &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_usual,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp U &kp S &kp U &kp A &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_young,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Y &kp O &kp U &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(dm_young,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Y &kp O &kp U &kp N &kp G &kp DOT>;
    )
    ZMK_MACRO(spm_ready,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp E &kp A &kp D &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_ready,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp E &kp A &kp D &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_above,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp B &kp O &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_above,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp A &kp B &kp O &kp V &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_ever,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp V &kp E &kp R &kp SPACE>;
    )
    ZMK_MACRO(dm_ever,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp V &kp E &kp R &kp DOT>;
    )
    ZMK_MACRO(spm_red,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp E &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_red,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp E &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_list,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp S &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_list,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp I &kp S &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_though,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp O &kp U &kp G &kp H &kp SPACE>;
    )
    ZMK_MACRO(dm_though,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp H &kp O &kp U &kp G &kp H &kp DOT>;
    )
    ZMK_MACRO(spm_feel,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp E &kp E &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_feel,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp E &kp E &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_talk,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp A &kp L &kp K &kp SPACE>;
    )
    ZMK_MACRO(dm_talk,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp A &kp L &kp K &kp DOT>;
    )
    ZMK_MACRO(spm_bird,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp I &kp R &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_bird,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp I &kp R &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_body,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp D &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_body,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp D &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_dog,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp G &kp SPACE>;
    )
    ZMK_MACRO(dm_dog,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp O &kp G &kp DOT>;
    )
    ZMK_MACRO(spm_family,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp A &kp M &kp I &kp L &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_family,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp A &kp M &kp I &kp L &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_direct,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp I &kp R &kp E &kp C &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_direct,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp D &kp I &kp R &kp E &kp C &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_pose,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp O &kp S &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_pose,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp O &kp S &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_leave,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp A &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_leave,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp E &kp A &kp V &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_song,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp O &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(dm_song,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp O &kp N &kp G &kp DOT>;
    )
    ZMK_MACRO(spm_measure,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp E &kp A &kp S &kp U &kp R &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_measure,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp E &kp A &kp S &kp U &kp R &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_product,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp R &kp O &kp D &kp U &kp C &kp T &kp SPACE>;
    )
    ZMK_MACRO(dm_product,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp P &kp R &kp O &kp D &kp U &kp C &kp T &kp DOT>;
    )
    ZMK_MACRO(spm_black,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp L &kp A &kp C &kp K &kp SPACE>;
    )
    ZMK_MACRO(dm_black,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp L &kp A &kp C &kp K &kp DOT>;
    )
    ZMK_MACRO(spm_numeral,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp U &kp M &kp E &kp R &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_numeral,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp N &kp U &kp M &kp E &kp R &kp A &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_wind,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp I &kp N &kp D &kp SPACE>;
    )
    ZMK_MACRO(dm_wind,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp W &kp I &kp N &kp D &kp DOT>;
    )
    ZMK_MACRO(spm_question,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Q &kp U &kp E &kp S &kp T &kp I &kp O &kp N &kp SPACE>;
    )
    ZMK_MACRO(dm_question,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp Q &kp U &kp E &kp S &kp T &kp I &kp O &kp N &kp DOT>;
    )
    ZMK_MACRO(spm_ship,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp H &kp I &kp P &kp SPACE>;
    )
    ZMK_MACRO(dm_ship,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp H &kp I &kp P &kp DOT>;
    )
    ZMK_MACRO(spm_half,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp L &kp F &kp SPACE>;
    )
    ZMK_MACRO(dm_half,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp H &kp A &kp L &kp F &kp DOT>;
    )
    ZMK_MACRO(spm_rock,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp O &kp C &kp K &kp SPACE>;
    )
    ZMK_MACRO(dm_rock,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp R &kp O &kp C &kp K &kp DOT>;
    )
    ZMK_MACRO(spm_knew,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp N &kp E &kp W &kp SPACE>;
    )
    ZMK_MACRO(dm_knew,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp N &kp E &kp W &kp DOT>;
    )
    ZMK_MACRO(spm_king,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp I &kp N &kp G &kp SPACE>;
    )
    ZMK_MACRO(dm_king,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp K &kp I &kp N &kp G &kp DOT>;
    )
    ZMK_MACRO(spm_size,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp I &kp Z &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_size,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp I &kp Z &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_early,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp R &kp L &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_early,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp E &kp A &kp R &kp L &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_five,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp I &kp V &kp E &kp SPACE>;
    )
    ZMK_MACRO(dm_five,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp I &kp V &kp E &kp DOT>;
    )
    ZMK_MACRO(spm_six,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp I &kp X &kp SPACE>;
    )
    ZMK_MACRO(dm_six,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp I &kp X &kp DOT>;
    )
    ZMK_MACRO(spm_travel,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp R &kp A &kp V &kp E &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_travel,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp T &kp R &kp A &kp V &kp E &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_several,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp V &kp E &kp R &kp A &kp L &kp SPACE>;
    )
    ZMK_MACRO(dm_several,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp S &kp E &kp V &kp E &kp R &kp A &kp L &kp DOT>;
    )
    ZMK_MACRO(spm_lay,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_lay,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp L &kp A &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_money,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp N &kp E &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_money,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp M &kp O &kp N &kp E &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_fly,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp L &kp Y &kp SPACE>;
    )
    ZMK_MACRO(dm_fly,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp F &kp L &kp Y &kp DOT>;
    )
    ZMK_MACRO(spm_box,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp X &kp SPACE>;
    )
    ZMK_MACRO(dm_box,
        wait-ms = <MACRO_WAIT>;
        tap-ms = <MACRO_TAP>;
        bindings = <&kp B &kp O &kp X &kp DOT>;
    )

    // MACROS END
  };
  combos {
    compatible = "zmk,combos";
    combo_system {
      timeout-ms = <100>;
      key-positions = <0 20>;
      bindings = <&tog L_SYS>;
    };
    // COMBOS START
    combo_spm_the {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_T P_SPC>;
      bindings = <&spm_the>;
    };
    combo_dm_the {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_T P_RALT>;
      bindings = <&dm_the>;
    };
    combo_spm_and {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_D P_SPC>;
      bindings = <&spm_and>;
    };
    combo_dm_and {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_D P_RALT>;
      bindings = <&dm_and>;
    };
    combo_spm_you {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_Y P_SPC>;
      bindings = <&spm_you>;
    };
    combo_dm_you {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_Y P_RALT>;
      bindings = <&dm_you>;
    };
    combo_spm_that {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_T P_SPC>;
      bindings = <&spm_that>;
    };
    combo_dm_that {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_T P_RALT>;
      bindings = <&dm_that>;
    };
    combo_spm_was {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_W P_SPC>;
      bindings = <&spm_was>;
    };
    combo_dm_was {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_W P_RALT>;
      bindings = <&dm_was>;
    };
    combo_spm_for {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_R P_SPC>;
      bindings = <&spm_for>;
    };
    combo_dm_for {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_R P_RALT>;
      bindings = <&dm_for>;
    };
    combo_spm_are {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_E P_SPC>;
      bindings = <&spm_are>;
    };
    combo_dm_are {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_E P_RALT>;
      bindings = <&dm_are>;
    };
    combo_spm_with {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_W P_SPC>;
      bindings = <&spm_with>;
    };
    combo_dm_with {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_W P_RALT>;
      bindings = <&dm_with>;
    };
    combo_spm_his {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_S P_SPC>;
      bindings = <&spm_his>;
    };
    combo_dm_his {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_S P_RALT>;
      bindings = <&dm_his>;
    };
    combo_spm_they {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_Y P_SPC>;
      bindings = <&spm_they>;
    };
    combo_dm_they {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_Y P_RALT>;
      bindings = <&dm_they>;
    };
    combo_spm_one {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_O P_SPC>;
      bindings = <&spm_one>;
    };
    combo_dm_one {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_O P_RALT>;
      bindings = <&dm_one>;
    };
    combo_spm_have {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_H P_SPC>;
      bindings = <&spm_have>;
    };
    combo_dm_have {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_H P_RALT>;
      bindings = <&dm_have>;
    };
    combo_spm_this {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_T P_SPC>;
      bindings = <&spm_this>;
    };
    combo_dm_this {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_T P_RALT>;
      bindings = <&dm_this>;
    };
    combo_spm_from {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_M P_SPC>;
      bindings = <&spm_from>;
    };
    combo_dm_from {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_M P_RALT>;
      bindings = <&dm_from>;
    };
    combo_spm_had {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_H P_SPC>;
      bindings = <&spm_had>;
    };
    combo_dm_had {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_H P_RALT>;
      bindings = <&dm_had>;
    };
    combo_spm_hot {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_T P_SPC>;
      bindings = <&spm_hot>;
    };
    combo_dm_hot {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_T P_RALT>;
      bindings = <&dm_hot>;
    };
    combo_spm_but {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_U P_SPC>;
      bindings = <&spm_but>;
    };
    combo_dm_but {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_U P_RALT>;
      bindings = <&dm_but>;
    };
    combo_spm_some {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_S P_SPC>;
      bindings = <&spm_some>;
    };
    combo_dm_some {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_S P_RALT>;
      bindings = <&dm_some>;
    };
    combo_spm_what {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_W P_SPC>;
      bindings = <&spm_what>;
    };
    combo_dm_what {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_W P_RALT>;
      bindings = <&dm_what>;
    };
    combo_spm_there {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_T P_SPC>;
      bindings = <&spm_there>;
    };
    combo_dm_there {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_T P_RALT>;
      bindings = <&dm_there>;
    };
    combo_spm_can {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_N P_SPC>;
      bindings = <&spm_can>;
    };
    combo_dm_can {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_N P_RALT>;
      bindings = <&dm_can>;
    };
    combo_spm_out {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_T P_SPC>;
      bindings = <&spm_out>;
    };
    combo_dm_out {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_T P_RALT>;
      bindings = <&dm_out>;
    };
    combo_spm_other {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_R P_SPC>;
      bindings = <&spm_other>;
    };
    combo_dm_other {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_R P_RALT>;
      bindings = <&dm_other>;
    };
    combo_spm_were {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_W P_SPC>;
      bindings = <&spm_were>;
    };
    combo_dm_were {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_W P_RALT>;
      bindings = <&dm_were>;
    };
    combo_spm_all {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_L P_SPC>;
      bindings = <&spm_all>;
    };
    combo_dm_all {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_L P_RALT>;
      bindings = <&dm_all>;
    };
    combo_spm_your {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_Y P_SPC>;
      bindings = <&spm_your>;
    };
    combo_dm_your {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_Y P_RALT>;
      bindings = <&dm_your>;
    };
    combo_spm_when {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_W P_SPC>;
      bindings = <&spm_when>;
    };
    combo_dm_when {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_W P_RALT>;
      bindings = <&dm_when>;
    };
    combo_spm_use {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_U P_SPC>;
      bindings = <&spm_use>;
    };
    combo_dm_use {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_U P_RALT>;
      bindings = <&dm_use>;
    };
    combo_spm_word {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_W P_SPC>;
      bindings = <&spm_word>;
    };
    combo_dm_word {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_W P_RALT>;
      bindings = <&dm_word>;
    };
    combo_spm_how {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_O P_SPC>;
      bindings = <&spm_how>;
    };
    combo_dm_how {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_O P_RALT>;
      bindings = <&dm_how>;
    };
    combo_spm_said {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_S P_SPC>;
      bindings = <&spm_said>;
    };
    combo_dm_said {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_S P_RALT>;
      bindings = <&dm_said>;
    };
    combo_spm_each {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_E P_SPC>;
      bindings = <&spm_each>;
    };
    combo_dm_each {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_E P_RALT>;
      bindings = <&dm_each>;
    };
    combo_spm_she {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_S P_SPC>;
      bindings = <&spm_she>;
    };
    combo_dm_she {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_S P_RALT>;
      bindings = <&dm_she>;
    };
    combo_spm_which {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_W P_SPC>;
      bindings = <&spm_which>;
    };
    combo_dm_which {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_W P_RALT>;
      bindings = <&dm_which>;
    };
    combo_spm_their {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_T P_SPC>;
      bindings = <&spm_their>;
    };
    combo_dm_their {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_T P_RALT>;
      bindings = <&dm_their>;
    };
    combo_spm_time {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_T P_SPC>;
      bindings = <&spm_time>;
    };
    combo_dm_time {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_T P_RALT>;
      bindings = <&dm_time>;
    };
    combo_spm_will {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_W P_SPC>;
      bindings = <&spm_will>;
    };
    combo_dm_will {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_W P_RALT>;
      bindings = <&dm_will>;
    };
    combo_spm_way {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_W P_Y P_SPC>;
      bindings = <&spm_way>;
    };
    combo_dm_way {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_W P_Y P_RALT>;
      bindings = <&dm_way>;
    };
    combo_spm_about {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_U P_SPC>;
      bindings = <&spm_about>;
    };
    combo_dm_about {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_U P_RALT>;
      bindings = <&dm_about>;
    };
    combo_spm_many {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_Y P_SPC>;
      bindings = <&spm_many>;
    };
    combo_dm_many {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_Y P_RALT>;
      bindings = <&dm_many>;
    };
    combo_spm_then {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_T P_SPC>;
      bindings = <&spm_then>;
    };
    combo_dm_then {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_T P_RALT>;
      bindings = <&dm_then>;
    };
    combo_spm_them {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_M P_SPC>;
      bindings = <&spm_them>;
    };
    combo_dm_them {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_M P_RALT>;
      bindings = <&dm_them>;
    };
    combo_spm_would {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_W P_SPC>;
      bindings = <&spm_would>;
    };
    combo_dm_would {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_W P_RALT>;
      bindings = <&dm_would>;
    };
    combo_spm_write {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_W P_SPC>;
      bindings = <&spm_write>;
    };
    combo_dm_write {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_W P_RALT>;
      bindings = <&dm_write>;
    };
    combo_spm_like {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_L P_SPC>;
      bindings = <&spm_like>;
    };
    combo_dm_like {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_L P_RALT>;
      bindings = <&dm_like>;
    };
    combo_spm_these {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_T P_SPC>;
      bindings = <&spm_these>;
    };
    combo_dm_these {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_T P_RALT>;
      bindings = <&dm_these>;
    };
    combo_spm_her {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_R P_SPC>;
      bindings = <&spm_her>;
    };
    combo_dm_her {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_R P_RALT>;
      bindings = <&dm_her>;
    };
    combo_spm_long {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_L P_SPC>;
      bindings = <&spm_long>;
    };
    combo_dm_long {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_L P_RALT>;
      bindings = <&dm_long>;
    };
    combo_spm_make {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_M P_SPC>;
      bindings = <&spm_make>;
    };
    combo_dm_make {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_M P_RALT>;
      bindings = <&dm_make>;
    };
    combo_spm_thing {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_T P_SPC>;
      bindings = <&spm_thing>;
    };
    combo_dm_thing {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_T P_RALT>;
      bindings = <&dm_thing>;
    };
    combo_spm_see {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_S P_SPC>;
      bindings = <&spm_see>;
    };
    combo_dm_see {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_S P_RALT>;
      bindings = <&dm_see>;
    };
    combo_spm_him {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_I P_SPC>;
      bindings = <&spm_him>;
    };
    combo_dm_him {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_I P_RALT>;
      bindings = <&dm_him>;
    };
    combo_spm_two {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_W P_SPC>;
      bindings = <&spm_two>;
    };
    combo_dm_two {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_W P_RALT>;
      bindings = <&dm_two>;
    };
    combo_spm_has {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_H P_SPC>;
      bindings = <&spm_has>;
    };
    combo_dm_has {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_H P_RALT>;
      bindings = <&dm_has>;
    };
    combo_spm_look {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_L P_SPC>;
      bindings = <&spm_look>;
    };
    combo_dm_look {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_L P_RALT>;
      bindings = <&dm_look>;
    };
    combo_spm_more {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_R P_SPC>;
      bindings = <&spm_more>;
    };
    combo_dm_more {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_R P_RALT>;
      bindings = <&dm_more>;
    };
    combo_spm_day {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_Y P_SPC>;
      bindings = <&spm_day>;
    };
    combo_dm_day {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_Y P_RALT>;
      bindings = <&dm_day>;
    };
    combo_spm_could {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_D P_SPC>;
      bindings = <&spm_could>;
    };
    combo_dm_could {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_D P_RALT>;
      bindings = <&dm_could>;
    };
    combo_spm_come {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_M P_SPC>;
      bindings = <&spm_come>;
    };
    combo_dm_come {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_M P_RALT>;
      bindings = <&dm_come>;
    };
    combo_spm_did {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_I P_SPC>;
      bindings = <&spm_did>;
    };
    combo_dm_did {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_I P_RALT>;
      bindings = <&dm_did>;
    };
    combo_spm_sound {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_S P_SPC>;
      bindings = <&spm_sound>;
    };
    combo_dm_sound {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_S P_RALT>;
      bindings = <&dm_sound>;
    };
    combo_spm_most {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_S P_SPC>;
      bindings = <&spm_most>;
    };
    combo_dm_most {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_S P_RALT>;
      bindings = <&dm_most>;
    };
    combo_spm_number {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_R P_SPC>;
      bindings = <&spm_number>;
    };
    combo_dm_number {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_R P_RALT>;
      bindings = <&dm_number>;
    };
    combo_spm_who {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_W P_SPC>;
      bindings = <&spm_who>;
    };
    combo_dm_who {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_W P_RALT>;
      bindings = <&dm_who>;
    };
    combo_spm_over {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_V P_SPC>;
      bindings = <&spm_over>;
    };
    combo_dm_over {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_V P_RALT>;
      bindings = <&dm_over>;
    };
    combo_spm_know {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_W P_SPC>;
      bindings = <&spm_know>;
    };
    combo_dm_know {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_W P_RALT>;
      bindings = <&dm_know>;
    };
    combo_spm_water {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_W P_SPC>;
      bindings = <&spm_water>;
    };
    combo_dm_water {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_W P_RALT>;
      bindings = <&dm_water>;
    };
    combo_spm_than {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_N P_SPC>;
      bindings = <&spm_than>;
    };
    combo_dm_than {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_N P_RALT>;
      bindings = <&dm_than>;
    };
    combo_spm_call {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_L P_SPC>;
      bindings = <&spm_call>;
    };
    combo_dm_call {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_L P_RALT>;
      bindings = <&dm_call>;
    };
    combo_spm_first {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_T P_SPC>;
      bindings = <&spm_first>;
    };
    combo_dm_first {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_T P_RALT>;
      bindings = <&dm_first>;
    };
    combo_spm_people {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_P P_SPC>;
      bindings = <&spm_people>;
    };
    combo_dm_people {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_P P_RALT>;
      bindings = <&dm_people>;
    };
    combo_spm_may {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_M P_SPC>;
      bindings = <&spm_may>;
    };
    combo_dm_may {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_M P_RALT>;
      bindings = <&dm_may>;
    };
    combo_spm_down {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_N P_SPC>;
      bindings = <&spm_down>;
    };
    combo_dm_down {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_N P_RALT>;
      bindings = <&dm_down>;
    };
    combo_spm_side {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_S P_SPC>;
      bindings = <&spm_side>;
    };
    combo_dm_side {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_S P_RALT>;
      bindings = <&dm_side>;
    };
    combo_spm_been {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_N P_SPC>;
      bindings = <&spm_been>;
    };
    combo_dm_been {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_N P_RALT>;
      bindings = <&dm_been>;
    };
    combo_spm_now {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_O P_SPC>;
      bindings = <&spm_now>;
    };
    combo_dm_now {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_O P_RALT>;
      bindings = <&dm_now>;
    };
    combo_spm_find {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_F P_SPC>;
      bindings = <&spm_find>;
    };
    combo_dm_find {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_F P_RALT>;
      bindings = <&dm_find>;
    };
    combo_spm_any {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_Y P_SPC>;
      bindings = <&spm_any>;
    };
    combo_dm_any {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_Y P_RALT>;
      bindings = <&dm_any>;
    };
    combo_spm_new {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_N P_SPC>;
      bindings = <&spm_new>;
    };
    combo_dm_new {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_N P_RALT>;
      bindings = <&dm_new>;
    };
    combo_spm_work {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_O P_SPC>;
      bindings = <&spm_work>;
    };
    combo_dm_work {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_O P_RALT>;
      bindings = <&dm_work>;
    };
    combo_spm_part {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_T P_SPC>;
      bindings = <&spm_part>;
    };
    combo_dm_part {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_T P_RALT>;
      bindings = <&dm_part>;
    };
    combo_spm_take {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_T P_SPC>;
      bindings = <&spm_take>;
    };
    combo_dm_take {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_T P_RALT>;
      bindings = <&dm_take>;
    };
    combo_spm_get {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_G P_SPC>;
      bindings = <&spm_get>;
    };
    combo_dm_get {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_G P_RALT>;
      bindings = <&dm_get>;
    };
    combo_spm_place {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_P P_SPC>;
      bindings = <&spm_place>;
    };
    combo_dm_place {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_P P_RALT>;
      bindings = <&dm_place>;
    };
    combo_spm_made {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_M P_SPC>;
      bindings = <&spm_made>;
    };
    combo_dm_made {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_M P_RALT>;
      bindings = <&dm_made>;
    };
    combo_spm_live {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_V P_SPC>;
      bindings = <&spm_live>;
    };
    combo_dm_live {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_V P_RALT>;
      bindings = <&dm_live>;
    };
    combo_spm_where {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_R P_SPC>;
      bindings = <&spm_where>;
    };
    combo_dm_where {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_R P_RALT>;
      bindings = <&dm_where>;
    };
    combo_spm_after {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_R P_SPC>;
      bindings = <&spm_after>;
    };
    combo_dm_after {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_R P_RALT>;
      bindings = <&dm_after>;
    };
    combo_spm_back {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_K P_SPC>;
      bindings = <&spm_back>;
    };
    combo_dm_back {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_K P_RALT>;
      bindings = <&dm_back>;
    };
    combo_spm_little {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_T P_SPC>;
      bindings = <&spm_little>;
    };
    combo_dm_little {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_T P_RALT>;
      bindings = <&dm_little>;
    };
    combo_spm_only {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_Y P_SPC>;
      bindings = <&spm_only>;
    };
    combo_dm_only {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_Y P_RALT>;
      bindings = <&dm_only>;
    };
    combo_spm_round {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_R P_SPC>;
      bindings = <&spm_round>;
    };
    combo_dm_round {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_R P_RALT>;
      bindings = <&dm_round>;
    };
    combo_spm_man {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_N P_SPC>;
      bindings = <&spm_man>;
    };
    combo_dm_man {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_N P_RALT>;
      bindings = <&dm_man>;
    };
    combo_spm_year {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_Y P_SPC>;
      bindings = <&spm_year>;
    };
    combo_dm_year {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_Y P_RALT>;
      bindings = <&dm_year>;
    };
    combo_spm_came {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_C P_SPC>;
      bindings = <&spm_came>;
    };
    combo_dm_came {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_C P_RALT>;
      bindings = <&dm_came>;
    };
    combo_spm_show {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_S P_SPC>;
      bindings = <&spm_show>;
    };
    combo_dm_show {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_S P_RALT>;
      bindings = <&dm_show>;
    };
    combo_spm_every {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_V P_SPC>;
      bindings = <&spm_every>;
    };
    combo_dm_every {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_V P_RALT>;
      bindings = <&dm_every>;
    };
    combo_spm_good {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_G P_SPC>;
      bindings = <&spm_good>;
    };
    combo_dm_good {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_G P_RALT>;
      bindings = <&dm_good>;
    };
    combo_spm_give {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_V P_SPC>;
      bindings = <&spm_give>;
    };
    combo_dm_give {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_V P_RALT>;
      bindings = <&dm_give>;
    };
    combo_spm_our {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_U P_SPC>;
      bindings = <&spm_our>;
    };
    combo_dm_our {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_U P_RALT>;
      bindings = <&dm_our>;
    };
    combo_spm_under {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_U P_SPC>;
      bindings = <&spm_under>;
    };
    combo_dm_under {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_U P_RALT>;
      bindings = <&dm_under>;
    };
    combo_spm_name {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_N P_SPC>;
      bindings = <&spm_name>;
    };
    combo_dm_name {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_N P_RALT>;
      bindings = <&dm_name>;
    };
    combo_spm_very {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_Y P_SPC>;
      bindings = <&spm_very>;
    };
    combo_dm_very {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_Y P_RALT>;
      bindings = <&dm_very>;
    };
    combo_spm_through {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_U P_SPC>;
      bindings = <&spm_through>;
    };
    combo_dm_through {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_U P_RALT>;
      bindings = <&dm_through>;
    };
    combo_spm_just {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_T P_SPC>;
      bindings = <&spm_just>;
    };
    combo_dm_just {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_T P_RALT>;
      bindings = <&dm_just>;
    };
    combo_spm_form {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_O P_SPC>;
      bindings = <&spm_form>;
    };
    combo_dm_form {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_O P_RALT>;
      bindings = <&dm_form>;
    };
    combo_spm_much {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_U P_SPC>;
      bindings = <&spm_much>;
    };
    combo_dm_much {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_U P_RALT>;
      bindings = <&dm_much>;
    };
    combo_spm_great {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_G P_SPC>;
      bindings = <&spm_great>;
    };
    combo_dm_great {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_G P_RALT>;
      bindings = <&dm_great>;
    };
    combo_spm_think {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_K P_SPC>;
      bindings = <&spm_think>;
    };
    combo_dm_think {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_K P_RALT>;
      bindings = <&dm_think>;
    };
    combo_spm_say {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_Y P_SPC>;
      bindings = <&spm_say>;
    };
    combo_dm_say {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_Y P_RALT>;
      bindings = <&dm_say>;
    };
    combo_spm_help {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_P P_SPC>;
      bindings = <&spm_help>;
    };
    combo_dm_help {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_P P_RALT>;
      bindings = <&dm_help>;
    };
    combo_spm_low {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_O P_SPC>;
      bindings = <&spm_low>;
    };
    combo_dm_low {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_O P_RALT>;
      bindings = <&dm_low>;
    };
    combo_spm_line {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_N P_SPC>;
      bindings = <&spm_line>;
    };
    combo_dm_line {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_N P_RALT>;
      bindings = <&dm_line>;
    };
    combo_spm_before {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_E P_SPC>;
      bindings = <&spm_before>;
    };
    combo_dm_before {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_E P_RALT>;
      bindings = <&dm_before>;
    };
    combo_spm_turn {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_U P_SPC>;
      bindings = <&spm_turn>;
    };
    combo_dm_turn {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_U P_RALT>;
      bindings = <&dm_turn>;
    };
    combo_spm_cause {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_S P_SPC>;
      bindings = <&spm_cause>;
    };
    combo_dm_cause {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_S P_RALT>;
      bindings = <&dm_cause>;
    };
    combo_spm_same {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_S P_SPC>;
      bindings = <&spm_same>;
    };
    combo_dm_same {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_S P_RALT>;
      bindings = <&dm_same>;
    };
    combo_spm_mean {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_M P_SPC>;
      bindings = <&spm_mean>;
    };
    combo_dm_mean {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_M P_RALT>;
      bindings = <&dm_mean>;
    };
    combo_spm_differ {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_E P_SPC>;
      bindings = <&spm_differ>;
    };
    combo_dm_differ {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_E P_RALT>;
      bindings = <&dm_differ>;
    };
    combo_spm_move {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_V P_SPC>;
      bindings = <&spm_move>;
    };
    combo_dm_move {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_V P_RALT>;
      bindings = <&dm_move>;
    };
    combo_spm_right {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_R P_SPC>;
      bindings = <&spm_right>;
    };
    combo_dm_right {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_R P_RALT>;
      bindings = <&dm_right>;
    };
    combo_spm_boy {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_Y P_SPC>;
      bindings = <&spm_boy>;
    };
    combo_dm_boy {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_Y P_RALT>;
      bindings = <&dm_boy>;
    };
    combo_spm_old {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_O P_SPC>;
      bindings = <&spm_old>;
    };
    combo_dm_old {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_O P_RALT>;
      bindings = <&dm_old>;
    };
    combo_spm_too {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_T P_SPC>;
      bindings = <&spm_too>;
    };
    combo_dm_too {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_T P_RALT>;
      bindings = <&dm_too>;
    };
    combo_spm_does {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_D P_SPC>;
      bindings = <&spm_does>;
    };
    combo_dm_does {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_D P_RALT>;
      bindings = <&dm_does>;
    };
    combo_spm_tell {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_T P_SPC>;
      bindings = <&spm_tell>;
    };
    combo_dm_tell {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_T P_RALT>;
      bindings = <&dm_tell>;
    };
    combo_spm_sentence {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_S P_SPC>;
      bindings = <&spm_sentence>;
    };
    combo_dm_sentence {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_S P_RALT>;
      bindings = <&dm_sentence>;
    };
    combo_spm_set {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_S P_SPC>;
      bindings = <&spm_set>;
    };
    combo_dm_set {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_S P_RALT>;
      bindings = <&dm_set>;
    };
    combo_spm_three {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_X P_SPC>;
      bindings = <&spm_three>;
    };
    combo_dm_three {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_X P_RALT>;
      bindings = <&dm_three>;
    };
    combo_spm_want {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_W P_SPC>;
      bindings = <&spm_want>;
    };
    combo_dm_want {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_W P_RALT>;
      bindings = <&dm_want>;
    };
    combo_spm_air {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_I P_SPC>;
      bindings = <&spm_air>;
    };
    combo_dm_air {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_I P_RALT>;
      bindings = <&dm_air>;
    };
    combo_spm_well {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_W P_SPC>;
      bindings = <&spm_well>;
    };
    combo_dm_well {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_W P_RALT>;
      bindings = <&dm_well>;
    };
    combo_spm_also {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_O P_SPC>;
      bindings = <&spm_also>;
    };
    combo_dm_also {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_O P_RALT>;
      bindings = <&dm_also>;
    };
    combo_spm_play {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_Y P_SPC>;
      bindings = <&spm_play>;
    };
    combo_dm_play {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_Y P_RALT>;
      bindings = <&dm_play>;
    };
    combo_spm_small {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_S P_SPC>;
      bindings = <&spm_small>;
    };
    combo_dm_small {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_S P_RALT>;
      bindings = <&dm_small>;
    };
    combo_spm_end {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_F P_SPC>;
      bindings = <&spm_end>;
    };
    combo_dm_end {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_F P_RALT>;
      bindings = <&dm_end>;
    };
    combo_spm_put {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_U P_SPC>;
      bindings = <&spm_put>;
    };
    combo_dm_put {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_U P_RALT>;
      bindings = <&dm_put>;
    };
    combo_spm_home {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_O P_SPC>;
      bindings = <&spm_home>;
    };
    combo_dm_home {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_O P_RALT>;
      bindings = <&dm_home>;
    };
    combo_spm_read {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_R P_SPC>;
      bindings = <&spm_read>;
    };
    combo_dm_read {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_R P_RALT>;
      bindings = <&dm_read>;
    };
    combo_spm_hand {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_H P_SPC>;
      bindings = <&spm_hand>;
    };
    combo_dm_hand {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_H P_RALT>;
      bindings = <&dm_hand>;
    };
    combo_spm_port {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_R P_SPC>;
      bindings = <&spm_port>;
    };
    combo_dm_port {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_R P_RALT>;
      bindings = <&dm_port>;
    };
    combo_spm_large {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_R P_SPC>;
      bindings = <&spm_large>;
    };
    combo_dm_large {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_R P_RALT>;
      bindings = <&dm_large>;
    };
    combo_spm_spell {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_S P_SPC>;
      bindings = <&spm_spell>;
    };
    combo_dm_spell {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_S P_RALT>;
      bindings = <&dm_spell>;
    };
    combo_spm_add {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_B P_SPC>;
      bindings = <&spm_add>;
    };
    combo_dm_add {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_B P_RALT>;
      bindings = <&dm_add>;
    };
    combo_spm_even {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_V P_SPC>;
      bindings = <&spm_even>;
    };
    combo_dm_even {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_V P_RALT>;
      bindings = <&dm_even>;
    };
    combo_spm_land {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_L P_SPC>;
      bindings = <&spm_land>;
    };
    combo_dm_land {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_L P_RALT>;
      bindings = <&dm_land>;
    };
    combo_spm_here {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_H P_SPC>;
      bindings = <&spm_here>;
    };
    combo_dm_here {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_H P_RALT>;
      bindings = <&dm_here>;
    };
    combo_spm_must {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_U P_SPC>;
      bindings = <&spm_must>;
    };
    combo_dm_must {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_U P_RALT>;
      bindings = <&dm_must>;
    };
    combo_spm_big {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_G P_SPC>;
      bindings = <&spm_big>;
    };
    combo_dm_big {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_G P_RALT>;
      bindings = <&dm_big>;
    };
    combo_spm_high {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_H P_SPC>;
      bindings = <&spm_high>;
    };
    combo_dm_high {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_H P_RALT>;
      bindings = <&dm_high>;
    };
    combo_spm_such {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_U P_SPC>;
      bindings = <&spm_such>;
    };
    combo_dm_such {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_U P_RALT>;
      bindings = <&dm_such>;
    };
    combo_spm_follow {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_L P_SPC>;
      bindings = <&spm_follow>;
    };
    combo_dm_follow {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_L P_RALT>;
      bindings = <&dm_follow>;
    };
    combo_spm_act {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_F P_SPC>;
      bindings = <&spm_act>;
    };
    combo_dm_act {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_F P_RALT>;
      bindings = <&dm_act>;
    };
    combo_spm_why {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_Y P_SPC>;
      bindings = <&spm_why>;
    };
    combo_dm_why {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_Y P_RALT>;
      bindings = <&dm_why>;
    };
    combo_spm_ask {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_K P_SPC>;
      bindings = <&spm_ask>;
    };
    combo_dm_ask {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_K P_RALT>;
      bindings = <&dm_ask>;
    };
    combo_spm_men {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_M P_SPC>;
      bindings = <&spm_men>;
    };
    combo_dm_men {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_M P_RALT>;
      bindings = <&dm_men>;
    };
    combo_spm_change {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_G P_SPC>;
      bindings = <&spm_change>;
    };
    combo_dm_change {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_G P_RALT>;
      bindings = <&dm_change>;
    };
    combo_spm_went {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_W P_SPC>;
      bindings = <&spm_went>;
    };
    combo_dm_went {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_W P_RALT>;
      bindings = <&dm_went>;
    };
    combo_spm_light {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_L P_SPC>;
      bindings = <&spm_light>;
    };
    combo_dm_light {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_L P_RALT>;
      bindings = <&dm_light>;
    };
    combo_spm_kind {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_K P_SPC>;
      bindings = <&spm_kind>;
    };
    combo_dm_kind {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_K P_RALT>;
      bindings = <&dm_kind>;
    };
    combo_spm_off {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_O P_SPC>;
      bindings = <&spm_off>;
    };
    combo_dm_off {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_O P_RALT>;
      bindings = <&dm_off>;
    };
    combo_spm_need {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_N P_SPC>;
      bindings = <&spm_need>;
    };
    combo_dm_need {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_N P_RALT>;
      bindings = <&dm_need>;
    };
    combo_spm_house {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_H P_SPC>;
      bindings = <&spm_house>;
    };
    combo_dm_house {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_H P_RALT>;
      bindings = <&dm_house>;
    };
    combo_spm_picture {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_P P_SPC>;
      bindings = <&spm_picture>;
    };
    combo_dm_picture {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_P P_RALT>;
      bindings = <&dm_picture>;
    };
    combo_spm_try {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_Z P_SPC>;
      bindings = <&spm_try>;
    };
    combo_dm_try {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_T P_Z P_RALT>;
      bindings = <&dm_try>;
    };
    combo_spm_again {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_N P_SPC>;
      bindings = <&spm_again>;
    };
    combo_dm_again {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_N P_RALT>;
      bindings = <&dm_again>;
    };
    combo_spm_animal {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_N P_SPC>;
      bindings = <&spm_animal>;
    };
    combo_dm_animal {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_N P_RALT>;
      bindings = <&dm_animal>;
    };
    combo_spm_point {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_P P_SPC>;
      bindings = <&spm_point>;
    };
    combo_dm_point {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_P P_RALT>;
      bindings = <&dm_point>;
    };
    combo_spm_mother {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_M P_SPC>;
      bindings = <&spm_mother>;
    };
    combo_dm_mother {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_M P_RALT>;
      bindings = <&dm_mother>;
    };
    combo_spm_world {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_W P_SPC>;
      bindings = <&spm_world>;
    };
    combo_dm_world {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_W P_RALT>;
      bindings = <&dm_world>;
    };
    combo_spm_near {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_Q P_SPC>;
      bindings = <&spm_near>;
    };
    combo_dm_near {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_Q P_RALT>;
      bindings = <&dm_near>;
    };
    combo_spm_build {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_L P_SPC>;
      bindings = <&spm_build>;
    };
    combo_dm_build {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_L P_RALT>;
      bindings = <&dm_build>;
    };
    combo_spm_self {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_S P_SPC>;
      bindings = <&spm_self>;
    };
    combo_dm_self {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_S P_RALT>;
      bindings = <&dm_self>;
    };
    combo_spm_earth {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_I P_SPC>;
      bindings = <&spm_earth>;
    };
    combo_dm_earth {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_I P_RALT>;
      bindings = <&dm_earth>;
    };
    combo_spm_father {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_F P_SPC>;
      bindings = <&spm_father>;
    };
    combo_dm_father {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_F P_RALT>;
      bindings = <&dm_father>;
    };
    combo_spm_head {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_J P_SPC>;
      bindings = <&spm_head>;
    };
    combo_dm_head {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_J P_RALT>;
      bindings = <&dm_head>;
    };
    combo_spm_stand {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_S P_SPC>;
      bindings = <&spm_stand>;
    };
    combo_dm_stand {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_S P_RALT>;
      bindings = <&dm_stand>;
    };
    combo_spm_own {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_O P_SPC>;
      bindings = <&spm_own>;
    };
    combo_dm_own {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_O P_RALT>;
      bindings = <&dm_own>;
    };
    combo_spm_page {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_P P_SPC>;
      bindings = <&spm_page>;
    };
    combo_dm_page {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_P P_RALT>;
      bindings = <&dm_page>;
    };
    combo_spm_should {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_U P_SPC>;
      bindings = <&spm_should>;
    };
    combo_dm_should {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_U P_RALT>;
      bindings = <&dm_should>;
    };
    combo_spm_country {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_Y P_SPC>;
      bindings = <&spm_country>;
    };
    combo_dm_country {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_Y P_RALT>;
      bindings = <&dm_country>;
    };
    combo_spm_found {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_U P_SPC>;
      bindings = <&spm_found>;
    };
    combo_dm_found {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_U P_RALT>;
      bindings = <&dm_found>;
    };
    combo_spm_answer {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_S P_SPC>;
      bindings = <&spm_answer>;
    };
    combo_dm_answer {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_S P_RALT>;
      bindings = <&dm_answer>;
    };
    combo_spm_school {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_V P_SPC>;
      bindings = <&spm_school>;
    };
    combo_dm_school {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_V P_RALT>;
      bindings = <&dm_school>;
    };
    combo_spm_grow {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_O P_SPC>;
      bindings = <&spm_grow>;
    };
    combo_dm_grow {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_O P_RALT>;
      bindings = <&dm_grow>;
    };
    combo_spm_study {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_X P_SPC>;
      bindings = <&spm_study>;
    };
    combo_dm_study {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_X P_RALT>;
      bindings = <&dm_study>;
    };
    combo_spm_still {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_Z P_SPC>;
      bindings = <&spm_still>;
    };
    combo_dm_still {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_S P_Z P_RALT>;
      bindings = <&dm_still>;
    };
    combo_spm_learn {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_L P_SPC>;
      bindings = <&spm_learn>;
    };
    combo_dm_learn {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_L P_RALT>;
      bindings = <&dm_learn>;
    };
    combo_spm_plant {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_P P_SPC>;
      bindings = <&spm_plant>;
    };
    combo_dm_plant {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_P P_RALT>;
      bindings = <&dm_plant>;
    };
    combo_spm_cover {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_R P_SPC>;
      bindings = <&spm_cover>;
    };
    combo_dm_cover {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_R P_RALT>;
      bindings = <&dm_cover>;
    };
    combo_spm_food {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_F P_SPC>;
      bindings = <&spm_food>;
    };
    combo_dm_food {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_F P_RALT>;
      bindings = <&dm_food>;
    };
    combo_spm_sun {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_U P_SPC>;
      bindings = <&spm_sun>;
    };
    combo_dm_sun {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_U P_RALT>;
      bindings = <&dm_sun>;
    };
    combo_spm_four {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_G P_SPC>;
      bindings = <&spm_four>;
    };
    combo_dm_four {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_G P_RALT>;
      bindings = <&dm_four>;
    };
    combo_spm_thought {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_U P_SPC>;
      bindings = <&spm_thought>;
    };
    combo_dm_thought {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_U P_RALT>;
      bindings = <&dm_thought>;
    };
    combo_spm_let {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_M P_SPC>;
      bindings = <&spm_let>;
    };
    combo_dm_let {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_M P_RALT>;
      bindings = <&dm_let>;
    };
    combo_spm_keep {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_P P_SPC>;
      bindings = <&spm_keep>;
    };
    combo_dm_keep {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_P P_RALT>;
      bindings = <&dm_keep>;
    };
    combo_spm_eye {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_J P_SPC>;
      bindings = <&spm_eye>;
    };
    combo_dm_eye {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_J P_RALT>;
      bindings = <&dm_eye>;
    };
    combo_spm_never {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_V P_SPC>;
      bindings = <&spm_never>;
    };
    combo_dm_never {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_V P_RALT>;
      bindings = <&dm_never>;
    };
    combo_spm_last {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_P P_SPC>;
      bindings = <&spm_last>;
    };
    combo_dm_last {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_P P_RALT>;
      bindings = <&dm_last>;
    };
    combo_spm_door {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_J P_SPC>;
      bindings = <&spm_door>;
    };
    combo_dm_door {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_J P_RALT>;
      bindings = <&dm_door>;
    };
    combo_spm_between {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_C P_SPC>;
      bindings = <&spm_between>;
    };
    combo_dm_between {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_C P_RALT>;
      bindings = <&dm_between>;
    };
    combo_spm_city {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_I P_SPC>;
      bindings = <&spm_city>;
    };
    combo_dm_city {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_I P_RALT>;
      bindings = <&dm_city>;
    };
    combo_spm_tree {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_R P_SPC>;
      bindings = <&spm_tree>;
    };
    combo_dm_tree {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_R P_RALT>;
      bindings = <&dm_tree>;
    };
    combo_spm_cross {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_J P_SPC>;
      bindings = <&spm_cross>;
    };
    combo_dm_cross {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_J P_RALT>;
      bindings = <&dm_cross>;
    };
    combo_spm_since {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_I P_SPC>;
      bindings = <&spm_since>;
    };
    combo_dm_since {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_I P_RALT>;
      bindings = <&dm_since>;
    };
    combo_spm_hard {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_Q P_SPC>;
      bindings = <&spm_hard>;
    };
    combo_dm_hard {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_Q P_RALT>;
      bindings = <&dm_hard>;
    };
    combo_spm_start {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_J P_SPC>;
      bindings = <&spm_start>;
    };
    combo_dm_start {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_J P_RALT>;
      bindings = <&dm_start>;
    };
    combo_spm_might {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_I P_SPC>;
      bindings = <&spm_might>;
    };
    combo_dm_might {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_I P_RALT>;
      bindings = <&dm_might>;
    };
    combo_spm_story {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_O P_SPC>;
      bindings = <&spm_story>;
    };
    combo_dm_story {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_O P_RALT>;
      bindings = <&dm_story>;
    };
    combo_spm_saw {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_Q P_SPC>;
      bindings = <&spm_saw>;
    };
    combo_dm_saw {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_Q P_RALT>;
      bindings = <&dm_saw>;
    };
    combo_spm_far {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_I P_SPC>;
      bindings = <&spm_far>;
    };
    combo_dm_far {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_I P_RALT>;
      bindings = <&dm_far>;
    };
    combo_spm_sea {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_K P_SPC>;
      bindings = <&spm_sea>;
    };
    combo_dm_sea {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_K P_RALT>;
      bindings = <&dm_sea>;
    };
    combo_spm_draw {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_Q P_SPC>;
      bindings = <&spm_draw>;
    };
    combo_dm_draw {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_Q P_RALT>;
      bindings = <&dm_draw>;
    };
    combo_spm_left {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_Q P_SPC>;
      bindings = <&spm_left>;
    };
    combo_dm_left {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_Q P_RALT>;
      bindings = <&dm_left>;
    };
    combo_spm_late {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_U P_SPC>;
      bindings = <&spm_late>;
    };
    combo_dm_late {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_U P_RALT>;
      bindings = <&dm_late>;
    };
    combo_spm_run {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_R P_SPC>;
      bindings = <&spm_run>;
    };
    combo_dm_run {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_R P_RALT>;
      bindings = <&dm_run>;
    };
    combo_spm_donSQTt {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_V P_SPC>;
      bindings = <&spm_donSQTt>;
    };
    combo_dm_donSQTt {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_V P_RALT>;
      bindings = <&dm_donSQTt>;
    };
    combo_spm_while {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_W P_SPC>;
      bindings = <&spm_while>;
    };
    combo_dm_while {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_W P_RALT>;
      bindings = <&dm_while>;
    };
    combo_spm_press {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_P P_SPC>;
      bindings = <&spm_press>;
    };
    combo_dm_press {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_P P_RALT>;
      bindings = <&dm_press>;
    };
    combo_spm_close {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_K P_SPC>;
      bindings = <&spm_close>;
    };
    combo_dm_close {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_K P_RALT>;
      bindings = <&dm_close>;
    };
    combo_spm_night {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_X P_SPC>;
      bindings = <&spm_night>;
    };
    combo_dm_night {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_X P_RALT>;
      bindings = <&dm_night>;
    };
    combo_spm_real {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_R P_SPC>;
      bindings = <&spm_real>;
    };
    combo_dm_real {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_R P_RALT>;
      bindings = <&dm_real>;
    };
    combo_spm_life {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_X P_SPC>;
      bindings = <&spm_life>;
    };
    combo_dm_life {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_X P_RALT>;
      bindings = <&dm_life>;
    };
    combo_spm_few {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_J P_SPC>;
      bindings = <&spm_few>;
    };
    combo_dm_few {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_J P_RALT>;
      bindings = <&dm_few>;
    };
    combo_spm_stop {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_P P_SPC>;
      bindings = <&spm_stop>;
    };
    combo_dm_stop {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_P P_RALT>;
      bindings = <&dm_stop>;
    };
    combo_spm_open {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_O P_SPC>;
      bindings = <&spm_open>;
    };
    combo_dm_open {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_O P_RALT>;
      bindings = <&dm_open>;
    };
    combo_spm_seem {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_Q P_SPC>;
      bindings = <&spm_seem>;
    };
    combo_dm_seem {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_Q P_RALT>;
      bindings = <&dm_seem>;
    };
    combo_spm_together {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_Q P_SPC>;
      bindings = <&spm_together>;
    };
    combo_dm_together {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_Q P_RALT>;
      bindings = <&dm_together>;
    };
    combo_spm_next {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_X P_SPC>;
      bindings = <&spm_next>;
    };
    combo_dm_next {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_X P_RALT>;
      bindings = <&dm_next>;
    };
    combo_spm_white {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_W P_SPC>;
      bindings = <&spm_white>;
    };
    combo_dm_white {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_W P_RALT>;
      bindings = <&dm_white>;
    };
    combo_spm_children {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_Q P_SPC>;
      bindings = <&spm_children>;
    };
    combo_dm_children {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_Q P_RALT>;
      bindings = <&dm_children>;
    };
    combo_spm_begin {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_J P_SPC>;
      bindings = <&spm_begin>;
    };
    combo_dm_begin {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_J P_RALT>;
      bindings = <&dm_begin>;
    };
    combo_spm_got {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_J P_SPC>;
      bindings = <&spm_got>;
    };
    combo_dm_got {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_J P_RALT>;
      bindings = <&dm_got>;
    };
    combo_spm_walk {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_W P_SPC>;
      bindings = <&spm_walk>;
    };
    combo_dm_walk {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_W P_RALT>;
      bindings = <&dm_walk>;
    };
    combo_spm_example {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_X P_SPC>;
      bindings = <&spm_example>;
    };
    combo_dm_example {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_X P_RALT>;
      bindings = <&dm_example>;
    };
    combo_spm_ease {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_Z P_SPC>;
      bindings = <&spm_ease>;
    };
    combo_dm_ease {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_E P_Z P_RALT>;
      bindings = <&dm_ease>;
    };
    combo_spm_paper {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_P P_SPC>;
      bindings = <&spm_paper>;
    };
    combo_dm_paper {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_P P_RALT>;
      bindings = <&dm_paper>;
    };
    combo_spm_often {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_X P_SPC>;
      bindings = <&spm_often>;
    };
    combo_dm_often {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_X P_RALT>;
      bindings = <&dm_often>;
    };
    combo_spm_always {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_Y P_SPC>;
      bindings = <&spm_always>;
    };
    combo_dm_always {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_Y P_RALT>;
      bindings = <&dm_always>;
    };
    combo_spm_music {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_U P_SPC>;
      bindings = <&spm_music>;
    };
    combo_dm_music {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_U P_RALT>;
      bindings = <&dm_music>;
    };
    combo_spm_those {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_V P_SPC>;
      bindings = <&spm_those>;
    };
    combo_dm_those {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_V P_RALT>;
      bindings = <&dm_those>;
    };
    combo_spm_both {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_Q P_SPC>;
      bindings = <&spm_both>;
    };
    combo_dm_both {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_Q P_RALT>;
      bindings = <&dm_both>;
    };
    combo_spm_mark {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_M P_SPC>;
      bindings = <&spm_mark>;
    };
    combo_dm_mark {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_M P_RALT>;
      bindings = <&dm_mark>;
    };
    combo_spm_book {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_V P_SPC>;
      bindings = <&spm_book>;
    };
    combo_dm_book {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_V P_RALT>;
      bindings = <&dm_book>;
    };
    combo_spm_letter {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_Z P_SPC>;
      bindings = <&spm_letter>;
    };
    combo_dm_letter {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_L P_Z P_RALT>;
      bindings = <&dm_letter>;
    };
    combo_spm_until {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_U P_SPC>;
      bindings = <&spm_until>;
    };
    combo_dm_until {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_U P_RALT>;
      bindings = <&dm_until>;
    };
    combo_spm_mile {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_M P_SPC>;
      bindings = <&spm_mile>;
    };
    combo_dm_mile {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_M P_RALT>;
      bindings = <&dm_mile>;
    };
    combo_spm_river {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_V P_SPC>;
      bindings = <&spm_river>;
    };
    combo_dm_river {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_V P_RALT>;
      bindings = <&dm_river>;
    };
    combo_spm_car {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_V P_SPC>;
      bindings = <&spm_car>;
    };
    combo_dm_car {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_V P_RALT>;
      bindings = <&dm_car>;
    };
    combo_spm_feet {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_K P_SPC>;
      bindings = <&spm_feet>;
    };
    combo_dm_feet {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_K P_RALT>;
      bindings = <&dm_feet>;
    };
    combo_spm_care {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_X P_SPC>;
      bindings = <&spm_care>;
    };
    combo_dm_care {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_X P_RALT>;
      bindings = <&dm_care>;
    };
    combo_spm_second {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_Z P_SPC>;
      bindings = <&spm_second>;
    };
    combo_dm_second {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_C P_Z P_RALT>;
      bindings = <&dm_second>;
    };
    combo_spm_group {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_K P_SPC>;
      bindings = <&spm_group>;
    };
    combo_dm_group {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_K P_RALT>;
      bindings = <&dm_group>;
    };
    combo_spm_carry {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_V P_SPC>;
      bindings = <&spm_carry>;
    };
    combo_dm_carry {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_V P_RALT>;
      bindings = <&dm_carry>;
    };
    combo_spm_took {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_Z P_SPC>;
      bindings = <&spm_took>;
    };
    combo_dm_took {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_O P_Z P_RALT>;
      bindings = <&dm_took>;
    };
    combo_spm_rain {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_R P_SPC>;
      bindings = <&spm_rain>;
    };
    combo_dm_rain {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_R P_RALT>;
      bindings = <&dm_rain>;
    };
    combo_spm_eat {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_X P_SPC>;
      bindings = <&spm_eat>;
    };
    combo_dm_eat {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_X P_RALT>;
      bindings = <&dm_eat>;
    };
    combo_spm_room {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_X P_SPC>;
      bindings = <&spm_room>;
    };
    combo_dm_room {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_X P_RALT>;
      bindings = <&dm_room>;
    };
    combo_spm_friend {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_Q P_SPC>;
      bindings = <&spm_friend>;
    };
    combo_dm_friend {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_Q P_RALT>;
      bindings = <&dm_friend>;
    };
    combo_spm_began {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_X P_SPC>;
      bindings = <&spm_began>;
    };
    combo_dm_began {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_X P_RALT>;
      bindings = <&dm_began>;
    };
    combo_spm_idea {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_J P_SPC>;
      bindings = <&spm_idea>;
    };
    combo_dm_idea {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_J P_RALT>;
      bindings = <&dm_idea>;
    };
    combo_spm_fish {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_V P_SPC>;
      bindings = <&spm_fish>;
    };
    combo_dm_fish {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_V P_RALT>;
      bindings = <&dm_fish>;
    };
    combo_spm_mountain {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_P P_SPC>;
      bindings = <&spm_mountain>;
    };
    combo_dm_mountain {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_P P_RALT>;
      bindings = <&dm_mountain>;
    };
    combo_spm_north {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_Y P_SPC>;
      bindings = <&spm_north>;
    };
    combo_dm_north {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_Y P_RALT>;
      bindings = <&dm_north>;
    };
    combo_spm_once {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_Z P_SPC>;
      bindings = <&spm_once>;
    };
    combo_dm_once {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_N P_Z P_RALT>;
      bindings = <&dm_once>;
    };
    combo_spm_base {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_Z P_SPC>;
      bindings = <&spm_base>;
    };
    combo_dm_base {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_B P_Z P_RALT>;
      bindings = <&dm_base>;
    };
    combo_spm_hear {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_X P_SPC>;
      bindings = <&spm_hear>;
    };
    combo_dm_hear {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_X P_RALT>;
      bindings = <&dm_hear>;
    };
    combo_spm_horse {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_Z P_SPC>;
      bindings = <&spm_horse>;
    };
    combo_dm_horse {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_H P_Z P_RALT>;
      bindings = <&dm_horse>;
    };
    combo_spm_cut {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_U P_SPC>;
      bindings = <&spm_cut>;
    };
    combo_dm_cut {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_U P_RALT>;
      bindings = <&dm_cut>;
    };
    combo_spm_sure {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_U P_SPC>;
      bindings = <&spm_sure>;
    };
    combo_dm_sure {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_U P_RALT>;
      bindings = <&dm_sure>;
    };
    combo_spm_watch {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_W P_SPC>;
      bindings = <&spm_watch>;
    };
    combo_dm_watch {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_W P_RALT>;
      bindings = <&dm_watch>;
    };
    combo_spm_color {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_Z P_SPC>;
      bindings = <&spm_color>;
    };
    combo_dm_color {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_R P_Z P_RALT>;
      bindings = <&dm_color>;
    };
    combo_spm_face {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_X P_SPC>;
      bindings = <&spm_face>;
    };
    combo_dm_face {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_X P_RALT>;
      bindings = <&dm_face>;
    };
    combo_spm_wood {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_W P_X P_SPC>;
      bindings = <&spm_wood>;
    };
    combo_dm_wood {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_W P_X P_RALT>;
      bindings = <&dm_wood>;
    };
    combo_spm_main {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_Q P_SPC>;
      bindings = <&spm_main>;
    };
    combo_dm_main {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_Q P_RALT>;
      bindings = <&dm_main>;
    };
    combo_spm_enough {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_V P_SPC>;
      bindings = <&spm_enough>;
    };
    combo_dm_enough {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_V P_RALT>;
      bindings = <&dm_enough>;
    };
    combo_spm_plain {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_P P_SPC>;
      bindings = <&spm_plain>;
    };
    combo_dm_plain {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_P P_RALT>;
      bindings = <&dm_plain>;
    };
    combo_spm_girl {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_Q P_SPC>;
      bindings = <&spm_girl>;
    };
    combo_dm_girl {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_Q P_RALT>;
      bindings = <&dm_girl>;
    };
    combo_spm_usual {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_X P_SPC>;
      bindings = <&spm_usual>;
    };
    combo_dm_usual {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_X P_RALT>;
      bindings = <&dm_usual>;
    };
    combo_spm_young {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_Y P_SPC>;
      bindings = <&spm_young>;
    };
    combo_dm_young {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_Y P_RALT>;
      bindings = <&dm_young>;
    };
    combo_spm_ready {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_Z P_SPC>;
      bindings = <&spm_ready>;
    };
    combo_dm_ready {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_A P_Z P_RALT>;
      bindings = <&dm_ready>;
    };
    combo_spm_above {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_V P_SPC>;
      bindings = <&spm_above>;
    };
    combo_dm_above {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_V P_RALT>;
      bindings = <&dm_above>;
    };
    combo_spm_ever {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_V P_SPC>;
      bindings = <&spm_ever>;
    };
    combo_dm_ever {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_V P_RALT>;
      bindings = <&dm_ever>;
    };
    combo_spm_red {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_X P_SPC>;
      bindings = <&spm_red>;
    };
    combo_dm_red {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_X P_RALT>;
      bindings = <&dm_red>;
    };
    combo_spm_list {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_K P_SPC>;
      bindings = <&spm_list>;
    };
    combo_dm_list {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_K P_RALT>;
      bindings = <&dm_list>;
    };
    combo_spm_though {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_Z P_SPC>;
      bindings = <&spm_though>;
    };
    combo_dm_though {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_U P_Z P_RALT>;
      bindings = <&dm_though>;
    };
    combo_spm_feel {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_Y P_SPC>;
      bindings = <&spm_feel>;
    };
    combo_dm_feel {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_Y P_RALT>;
      bindings = <&dm_feel>;
    };
    combo_spm_talk {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_K P_SPC>;
      bindings = <&spm_talk>;
    };
    combo_dm_talk {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_K P_RALT>;
      bindings = <&dm_talk>;
    };
    combo_spm_bird {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_Q P_SPC>;
      bindings = <&spm_bird>;
    };
    combo_dm_bird {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_Q P_RALT>;
      bindings = <&dm_bird>;
    };
    combo_spm_body {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_Z P_SPC>;
      bindings = <&spm_body>;
    };
    combo_dm_body {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_D P_Z P_RALT>;
      bindings = <&dm_body>;
    };
    combo_spm_dog {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_X P_SPC>;
      bindings = <&spm_dog>;
    };
    combo_dm_dog {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_X P_RALT>;
      bindings = <&dm_dog>;
    };
    combo_spm_family {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_Y P_SPC>;
      bindings = <&spm_family>;
    };
    combo_dm_family {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_Y P_RALT>;
      bindings = <&dm_family>;
    };
    combo_spm_direct {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_X P_SPC>;
      bindings = <&spm_direct>;
    };
    combo_dm_direct {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_X P_RALT>;
      bindings = <&dm_direct>;
    };
    combo_spm_pose {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_Q P_SPC>;
      bindings = <&spm_pose>;
    };
    combo_dm_pose {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_Q P_RALT>;
      bindings = <&dm_pose>;
    };
    combo_spm_leave {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_V P_SPC>;
      bindings = <&spm_leave>;
    };
    combo_dm_leave {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_V P_RALT>;
      bindings = <&dm_leave>;
    };
    combo_spm_song {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_Z P_SPC>;
      bindings = <&spm_song>;
    };
    combo_dm_song {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_G P_Z P_RALT>;
      bindings = <&dm_song>;
    };
    combo_spm_measure {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_X P_SPC>;
      bindings = <&spm_measure>;
    };
    combo_dm_measure {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_X P_RALT>;
      bindings = <&dm_measure>;
    };
    combo_spm_product {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_Z P_SPC>;
      bindings = <&spm_product>;
    };
    combo_dm_product {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_P P_Z P_RALT>;
      bindings = <&dm_product>;
    };
    combo_spm_black {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_Q P_SPC>;
      bindings = <&spm_black>;
    };
    combo_dm_black {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_Q P_RALT>;
      bindings = <&dm_black>;
    };
    combo_spm_numeral {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_Z P_SPC>;
      bindings = <&spm_numeral>;
    };
    combo_dm_numeral {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_M P_Z P_RALT>;
      bindings = <&dm_numeral>;
    };
    combo_spm_wind {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_W P_Z P_SPC>;
      bindings = <&spm_wind>;
    };
    combo_dm_wind {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_W P_Z P_RALT>;
      bindings = <&dm_wind>;
    };
    combo_spm_question {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_Q P_SPC>;
      bindings = <&spm_question>;
    };
    combo_dm_question {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_Q P_RALT>;
      bindings = <&dm_question>;
    };
    combo_spm_ship {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_Z P_SPC>;
      bindings = <&spm_ship>;
    };
    combo_dm_ship {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_I P_Z P_RALT>;
      bindings = <&dm_ship>;
    };
    combo_spm_half {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_Z P_SPC>;
      bindings = <&spm_half>;
    };
    combo_dm_half {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_F P_Z P_RALT>;
      bindings = <&dm_half>;
    };
    combo_spm_rock {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_X P_SPC>;
      bindings = <&spm_rock>;
    };
    combo_dm_rock {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_X P_RALT>;
      bindings = <&dm_rock>;
    };
    combo_spm_knew {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_Y P_SPC>;
      bindings = <&spm_knew>;
    };
    combo_dm_knew {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_Y P_RALT>;
      bindings = <&dm_knew>;
    };
    combo_spm_king {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_Z P_SPC>;
      bindings = <&spm_king>;
    };
    combo_dm_king {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_K P_Z P_RALT>;
      bindings = <&dm_king>;
    };
    combo_spm_size {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_Z P_SPC>;
      bindings = <&spm_size>;
    };
    combo_dm_size {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_Z P_RALT>;
      bindings = <&dm_size>;
    };
    combo_spm_early {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_Y P_SPC>;
      bindings = <&spm_early>;
    };
    combo_dm_early {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_Y P_RALT>;
      bindings = <&dm_early>;
    };
    combo_spm_five {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_V P_SPC>;
      bindings = <&spm_five>;
    };
    combo_dm_five {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_V P_RALT>;
      bindings = <&dm_five>;
    };
    combo_spm_six {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_X P_SPC>;
      bindings = <&spm_six>;
    };
    combo_dm_six {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_J P_X P_RALT>;
      bindings = <&dm_six>;
    };
    combo_spm_travel {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_X P_SPC>;
      bindings = <&spm_travel>;
    };
    combo_dm_travel {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_X P_RALT>;
      bindings = <&dm_travel>;
    };
    combo_spm_several {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_Z P_SPC>;
      bindings = <&spm_several>;
    };
    combo_dm_several {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_V P_Z P_RALT>;
      bindings = <&dm_several>;
    };
    combo_spm_lay {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_Y P_SPC>;
      bindings = <&spm_lay>;
    };
    combo_dm_lay {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_Y P_RALT>;
      bindings = <&dm_lay>;
    };
    combo_spm_money {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_X P_Y P_SPC>;
      bindings = <&spm_money>;
    };
    combo_dm_money {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_X P_Y P_RALT>;
      bindings = <&dm_money>;
    };
    combo_spm_fly {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Y P_Z P_SPC>;
      bindings = <&spm_fly>;
    };
    combo_dm_fly {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Y P_Z P_RALT>;
      bindings = <&dm_fly>;
    };
    combo_spm_box {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_X P_SPC>;
      bindings = <&spm_box>;
    };
    combo_dm_box {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <P_Q P_X P_RALT>;
      bindings = <&dm_box>;
    };

    // COMBOS END
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        DEF_Q    DEF_W    DEF_F    DEF_P    DEF_B          DEF_J    DEF_L    DEF_U    DEF_Y    DEF_SEMI
        DEF_A    DEF_R    DEF_S    DEF_T    DEF_G          DEF_M    DEF_N    DEF_E    DEF_I    DEF_O
        DEF_Z    DEF_X    DEF_C    DEF_D    DEF_V          DEF_K    DEF_H    DEF_COMA DEF_DOT  DEF_QUOT
                                   DEF_NUM  DEF_SPC        DEF_SHFT DEF_NAV
      >;
    };

    navigation_layer {
      bindings = <
        NAV_DEL  NAV_ESC  NAV_BSPC NAV_RET  MED_PRNT       GEN_TRAN NUM_LBKT NUM_RBKT NAV_GRV  NAV_BSLH
        NAV_LEFT NAV_UP   NAV_DOWN NAV_RGHT NAV_TAB        GEN_TRAN GEN_CTRL GEN_GUI  GEN_ALT  GEN_MED
        NAV_HOME NAV_PGUP NAV_PGDN NAV_END  NUM_STAB       GEN_TRAN NUM_LBRC NUM_RBRC NAV_TILD NAV_PIPE
                                   GEN_TRAN DEF_SHFT       DEF_SHFT GEN_TRAN
      >;
    };

    number_layer {
      bindings = <
        NAV_DEL  NAV_ESC  NAV_BSPC NAV_RET  MED_PRNT       NUM_PLUS NUM_N7    NUM_N8    NUM_N9    NUM_AST
        GEN_FN   GEN_ALT  GEN_GUI  GEN_CTRL NAV_TAB        NUM_EQUL NUM_N4    NUM_N5    NUM_N6    NUM_N0
        MED_UNDO MED_CUT  MED_COPY NUM_PST  NUM_STAB       NUM_MIN  NUM_N1    NUM_N2    NUM_N3    NUM_FSLH
                                   GEN_TRAN DEF_SHFT       DEF_SHFT GEN_TRAN
      >;
    };

    media_layer {
      bindings = <
        MED_STOP MED_VOLD MED_MUTE MED_VOLU MED_BRIU       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
        MED_PRNT MED_PREV MED_PLAY MED_NEXT MED_BRID       GEN_TRAN GEN_CTRL GEN_GUI  GEN_ALT  GEN_MED
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
                                   GEN_TRAN DEF_SHFT       DEF_SHFT GEN_TRAN
      >;
    };

    function_layer {
      bindings = <
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN FUN_F7   FUN_F8   FUN_F9   FUN_F10
        GEN_FN   GEN_ALT  GEN_MED  GEN_CTRL GEN_TRAN       FUN_GAME FUN_F4   FUN_F5   FUN_F6   FUN_F11
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN FUN_F1   FUN_F2   FUN_F3   FUN_F13
                                   GEN_TRAN DEF_SHFT       DEF_SHFT GEN_TRAN
      >;
    };

    gaming_layer {
      bindings = <
        GAM_TAB  GAM_Q    GAM_W    GAM_E    GAM_R          GEN_NONE GEN_NONE GAM_UP   GEN_NONE GEN_NONE
        GAM_LSFT GAM_A    GAM_S    GAM_D    GAM_F          GAM_DEF  GAM_LEFT GAM_DOWN GAM_RGHT GEN_NONE
        GAM_LCTL GAM_Z    GAM_X    GAM_C    GAM_V          GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE
                                   GEN_TRAN GAM_SPC        GEN_TRAN GEN_TRAN
      >;
    };

    system_layer {
      bindings = <
        GEN_TRAN SYS_BTPR SYS_BTCL SYS_BTNX SYS_BLE        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
        SYS_BOOT SYS_BT3  SYS_BT4  GEN_TRAN SYS_OTG        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
        GEN_TRAN SYS_BT0  SYS_BT1  SYS_BT2  SYS_USB        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
                                   GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
      >;
    };

    // empty_layer {
    //   bindings = <
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //                                GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
    //   >;
    // };

  };
};
