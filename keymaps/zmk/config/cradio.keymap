/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// GENERAL KEYS
#define GEN_NONE &none
#define GEN_TRAN &trans

#define GEN_CTRL &kp LCTRL
#define GEN_ALT &kp LALT
#define GEN_GUI &kp LGUI
#define GEN_FN &mo L_FUN
#define GEN_MED &mo L_MED

// DEFAULT LAYER

#define L_DEF 0

#define DEF_Q &kp Q
#define DEF_W &kp W
#define DEF_F &kp F
#define DEF_P &kp P
#define DEF_B &kp B
                        
#define DEF_A &lt L_FUN A 
#define DEF_R &mt LALT R 
#define DEF_S &mt LGUI S
#define DEF_T &mt LCTRL T 
#define DEF_G &kp G
        
#define DEF_Z &kp Z
#define DEF_X &kp X
#define DEF_C &kp C
#define DEF_D &kp D
#define DEF_V &kp V
                        

#define DEF_J &kp J
#define DEF_L &kp L
#define DEF_U &kp U
#define DEF_Y &kp Y
#define DEF_SEMI &kp SEMI

#define DEF_K &kp K
#define DEF_H &kp H
#define DEF_COMA &kp COMMA
#define DEF_DOT &kp DOT
#define DEF_QUOT &kp SQT

#define DEF_M &kp M
#define DEF_N &mt LCTRL N
#define DEF_E &mt RGUI E
#define DEF_I &mt LALT I 
#define DEF_O &lt L_MED O

#define DEF_SPC  &kp SPC
#define DEF_NAV  &mo L_NAV
#define DEF_NUM  &mo L_NUM
#define DEF_SHFT &sk LSHIFT

// NAVIGATION LAYER
#define L_NAV 1

#define NAV_CAPS &kp CAPS
#define NAV_BSLH &kp BSLH
#define NAV_PIPE &kp PIPE
#define NAV_HOME &kp HOME
#define NAV_UP &kp UP
#define NAV_END &kp END
#define NAV_PGUP &kp PG_UP

#define NAV_ESC &lt L_FUN ESC
#define NAV_LEFT &kp LEFT
#define NAV_DOWN &kp DOWN
#define NAV_RGHT &kp RIGHT
#define NAV_TAB &kp TAB

#define NAV_GRV &kp GRAVE
#define NAV_TILD &kp TILDE

#define NAV_DEL &mt LALT DEL
#define NAV_BSPC &mt LGUI BSPC
#define NAV_RET &mt LCTRL RET
#define NAV_PGDN &kp PG_DN

// NUM LAYER
#define L_NUM 2

#define NUM_LBKT &kp LBKT
#define NUM_LBRC &kp LBRC
#define NUM_N7 &kp N7 
#define NUM_N8 &kp N8
#define NUM_N9 &kp N9
#define NUM_RBKT &kp RBKT 
#define NUM_RBRC &kp RBRC

#define NUM_EQUL &kp EQUAL
#define NUM_PLUS &kp PLUS
#define NUM_AST  &kp ASTERISK 

#define NUM_N4 &kp N4
#define NUM_N5 &kp N5
#define NUM_N6 &kp N6
#define NUM_N0 &kp N0

#define NUM_MIN &kp MINUS
#define NUM_N1 &kp N1
#define NUM_N2 &kp N2
#define NUM_N3 &kp N3
#define NUM_FSLH &kp FSLH

// MEDIA LAYER
#define L_MED 3

#define MED_BRID &kp C_BRI_DN
#define MED_VOLU &kp C_VOL_UP
#define MED_BRIU &kp C_BRI_UP


#define MED_PRNT &kp PSCRN
#define MED_PREV &kp C_PREV
#define MED_PLAY &kp C_PP
#define MED_NEXT &kp C_NEXT

#define MED_MUTE &kp C_MUTE
#define MED_VOLD &kp C_VOL_DN
#define MED_STOP &kp C_STOP

#define MED_UNDO &kp LC(Z)
#define MED_CUT  &kp LC(X)
#define MED_COPY &kp LC(C)
#define NUM_PST  &kp LC(V)
#define NUM_STAB &kp LS(TAB)

//FUNCTION LAYER
#define L_FUN 4

#define FUN_F7 &kp F7
#define FUN_F8 &kp F8
#define FUN_F9 &kp F9
#define FUN_F10 &kp F10

#define FUN_GAME &to L_GAM
#define FUN_F4 &kp F4
#define FUN_F5 &kp F5
#define FUN_F6 &kp F6
#define FUN_F11 &kp F11

#define FUN_BOOT &bootloader
#define FUN_F1 &kp F1
#define FUN_F2 &kp F2
#define FUN_F3 &kp F3
#define FUN_F13 &kp F12

#define FUN_SPC &kp LC(SPC)

// GAMING LAYER
#define L_GAM 5

#define GAM_TAB &kp TAB
#define GAM_Q &kp Q
#define GAM_W &kp W
#define GAM_E &kp E
#define GAM_R &kp R

#define GAM_LSFT &kp LSHIFT
#define GAM_A &kp A
#define GAM_S &kp S
#define GAM_D &kp D
#define GAM_F &kp F

#define GAM_LCTL &kp LCTRL
#define GAM_Z &kp Z
#define GAM_X &kp X
#define GAM_C &kp C
#define GAM_V &kp V


#define GAM_UP &kp UP

#define GAM_DEF &to L_DEF
#define GAM_LEFT &kp LEFT
#define GAM_DOWN &kp DOWN
#define GAM_RGHT &kp RIGHT

#define GAM_ESC &kp ESC
#define GAM_SPC &kp SPACE

// SYSTEM LAYER
#define L_SYS 6

#define SYS_BOOT &bootloader
#define SYS_BTCL &bt BT_CLR
#define SYS_BTNX &bt BT_NXT
#define SYS_BTPR &bt BT_PRV
#define SYS_BLE &out OUT_BLE
#define SYS_USB &out OUT_USB
#define SYS_OTG &out OUT_TOG
#define SYS_BT0 &bt BT_SEL 0
#define SYS_BT1 &bt BT_SEL 1
#define SYS_BT2 &bt BT_SEL 2
#define SYS_BT3 &bt BT_SEL 3
#define SYS_BT4 &bt BT_SEL 4

// POSITIONS
#define P_Q 0
#define P_W 1
#define P_F 2
#define P_P 3
#define P_B 4
#define P_J 5
#define P_L 6
#define P_U 7
#define P_Y 8
#define P_SEMI 9
#define P_A 10
#define P_R 11
#define P_S 12
#define P_T 13
#define P_G 14
#define P_M 15
#define P_N 16
#define P_E 17
#define P_I 18
#define P_O 19
#define P_Z 20
#define P_X 21
#define P_C 22
#define P_D 23
#define P_V 24
#define P_K 25
#define P_H 26
#define P_COMMA 27
#define P_DOT 28
#define P_SQT 29
#define P_COMBO 31 32

#define P_LALT 30
#define P_SPC 31
#define P_SHFT 32
#define P_RALT 33

#define COMBO_TIMEOUT 100
#define MACRO_TAP 10
#define MACRO_WAIT 0

&mt {
  flavor = "tap-preferred";
  tapping_term_ms = <200>;
};

&lt {
  flavor = "tap-preferred";
  tapping_term_ms = <200>;
};
&sl {
    release-after-ms = <1000>;
};
&sk {
    release-after-ms = <1000>;
    quick-release;
};
/ {
  macros {
    // MACROS START
    // MACROS END
  };
  combos {
    compatible = "zmk,combos";
    combo_system {
      timeout-ms = <100>;
      key-positions = <P_Q P_Z>;
      bindings = <&tog L_SYS>;
    };
    combo_boot {
      timeout-ms = <100>;
      key-positions = <P_Q P_B>;
      bindings = <SYS_BOOT>;
    };
    combo_ins {
      timeout-ms = <100>;
      key-positions = <P_K P_H>;
      bindings = <&kp INS>;
    };
    combo_excl {
      timeout-ms = <100>;
      key-positions = <P_A P_Q>;
      bindings = <&kp EXCL>;
    };
    combo_at {
      timeout-ms = <100>;
      key-positions = <P_R P_W>;
      bindings = <&kp AT>;
    };
    combo_pound {
      timeout-ms = <100>;
      key-positions = <P_S P_F>;
      bindings = <&kp POUND>;
    };
    combo_dollar {
      timeout-ms = <100>;
      key-positions = <P_T P_P>;
      bindings = <&kp DOLLAR>;
    };
    combo_percent {
      timeout-ms = <100>;
      key-positions = <P_G P_B>;
      bindings = <&kp PERCENT>;
    };
    combo_caret {
      timeout-ms = <100>;
      key-positions = <P_M P_J>;
      bindings = <&kp CARET>;
    };
    combo_amps {
      timeout-ms = <100>;
      key-positions = <P_N P_L>;
      bindings = <&kp AMPS>;
    };
    combo_star {
      timeout-ms = <100>;
      key-positions = <P_E P_U>;
      bindings = <&kp PERCENT>;
    };
    combo_lpar {
      timeout-ms = <100>;
      key-positions = <P_I P_Y>;
      bindings = <&kp LPAR>;
    };
    combo_rpar {
      timeout-ms = <100>;
      key-positions = <P_O P_SEMI>;
      bindings = <&kp RPAR>;
    };

    combo_lbkt {
      timeout-ms = <100>;
      key-positions = <P_A P_Z>;
      bindings = <&kp LBKT>;
    };
    combo_rbkt {
      timeout-ms = <100>;
      key-positions = <P_R P_X>;
      bindings = <&kp RBKT>;
    };
    combo_lbrc {
      timeout-ms = <100>;
      key-positions = <P_S P_C>;
      bindings = <&kp LBRC>;
    };
    combo_rbrc {
      timeout-ms = <100>;
      key-positions = <P_T P_D>;
      bindings = <&kp RBRC>;
    };
    combo_grave {
      timeout-ms = <100>;
      key-positions = <P_G P_V>;
      bindings = <&kp GRAVE>;
    };
    combo_tilde {
      timeout-ms = <100>;
      key-positions = <P_M P_K>;
      bindings = <&kp TILDE>;
    };
    combo_minus {
      timeout-ms = <100>;
      key-positions = <P_N P_H>;
      bindings = <&kp MINUS>;
    };
    combo_equal {
      timeout-ms = <100>;
      key-positions = <P_E P_COMMA>;
      bindings = <&kp EQUAL>;
    };
    combo_under {
      timeout-ms = <100>;
      key-positions = <P_I P_DOT>;
      bindings = <&kp UNDER>;
    };
    combo_plus {
      timeout-ms = <100>;
      key-positions = <P_O P_SQT>;
      bindings = <&kp PLUS>;
    };
    // COMBOS START
    // COMBOS END
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        DEF_Q    DEF_W    DEF_F    DEF_P    DEF_B          DEF_J    DEF_L    DEF_U    DEF_Y    DEF_SEMI
        DEF_A    DEF_R    DEF_S    DEF_T    DEF_G          DEF_M    DEF_N    DEF_E    DEF_I    DEF_O
        DEF_Z    DEF_X    DEF_C    DEF_D    DEF_V          DEF_K    DEF_H    DEF_COMA DEF_DOT  DEF_QUOT
                                   DEF_NUM  DEF_SPC        DEF_SHFT DEF_NAV
      >;
    };

    navigation_layer {
      bindings = <
        NAV_DEL  NAV_ESC  NAV_BSPC NAV_RET  MED_PRNT       GEN_TRAN NUM_LBRC NUM_RBRC NAV_TILD NAV_PIPE
        NAV_LEFT NAV_UP   NAV_DOWN NAV_RGHT NAV_TAB        NAV_TAB  NAV_RET  NAV_BSPC NAV_DEL  NAV_ESC  
        NAV_HOME NAV_PGUP NAV_PGDN NAV_END  NUM_STAB       GEN_TRAN NUM_LBKT NUM_RBKT NAV_GRV  NAV_BSLH
                                   GEN_TRAN DEF_SHFT       DEF_SHFT GEN_TRAN
      >;
    };

    number_layer {
      bindings = <
        NAV_DEL  NAV_ESC  NAV_BSPC NAV_RET  MED_PRNT       NUM_PLUS NUM_N7    NUM_N8    NUM_N9    NUM_AST
        NAV_ESC  NAV_DEL  NAV_BSPC NAV_RET  NAV_TAB        NUM_EQUL NUM_N4    NUM_N5    NUM_N6    NUM_N0
        MED_UNDO MED_CUT  MED_COPY NUM_PST  NUM_STAB       NUM_MIN  NUM_N1    NUM_N2    NUM_N3    NUM_FSLH
                                   GEN_TRAN DEF_SHFT       DEF_SHFT GEN_TRAN
      >;
    };

    media_layer {
      bindings = <
        MED_STOP MED_VOLD MED_MUTE MED_VOLU MED_BRIU       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
        MED_PRNT MED_PREV MED_PLAY MED_NEXT MED_BRID       GEN_TRAN GEN_CTRL GEN_GUI  GEN_ALT  GEN_MED
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
                                   GEN_TRAN DEF_SHFT       DEF_SHFT GEN_TRAN
      >;
    };

    function_layer {
      bindings = <
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN FUN_F7   FUN_F8   FUN_F9   FUN_F10
        GEN_FN   GEN_ALT  GEN_MED  GEN_CTRL GEN_TRAN       FUN_GAME FUN_F4   FUN_F5   FUN_F6   FUN_F11
        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN FUN_F1   FUN_F2   FUN_F3   FUN_F13
                                   GEN_TRAN DEF_SHFT       DEF_SHFT GEN_TRAN
      >;
    };

    gaming_layer {
      bindings = <
        GAM_TAB  GAM_Q    GAM_W    GAM_E    GAM_R          GEN_NONE GEN_NONE GAM_UP   GEN_NONE GEN_NONE
        GAM_LSFT GAM_A    GAM_S    GAM_D    GAM_F          GAM_DEF  GAM_LEFT GAM_DOWN GAM_RGHT GEN_NONE
        GAM_LCTL GAM_Z    GAM_X    GAM_C    GAM_V          GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE
                                   GEN_TRAN GAM_SPC        GEN_TRAN GEN_TRAN
      >;
    };

    system_layer {
      bindings = <
        GEN_TRAN SYS_BTPR SYS_BTCL SYS_BTNX SYS_BLE        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
        SYS_BOOT SYS_BT3  SYS_BT4  GEN_TRAN SYS_OTG        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
        GEN_TRAN SYS_BT0  SYS_BT1  SYS_BT2  SYS_USB        GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
                                   GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
      >;
    };

    // empty_layer {
    //   bindings = <
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //     GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN GEN_TRAN
    //                                GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
    //   >;
    // };

  };
};
